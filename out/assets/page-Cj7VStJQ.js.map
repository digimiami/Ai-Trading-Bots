{"version":3,"file":"page-Cj7VStJQ.js","sources":["../../src/pages/home/components/StatsGrid.tsx","../../src/pages/home/components/ActiveBots.tsx","../../src/hooks/useMarketData.ts","../../src/pages/home/components/MarketOverview.tsx","../../src/hooks/useExchangeBalance.ts","../../src/pages/home/components/ExchangeBalance.tsx","../../src/pages/home/page.tsx"],"sourcesContent":["\nimport { useBots } from '../../../hooks/useBots';\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  change: string;\n  changeType: 'positive' | 'negative' | 'neutral';\n  icon: string;\n}\n\nfunction StatCard({ title, value, change, changeType, icon }: StatCardProps) {\n  const changeColors = {\n    positive: 'text-green-600',\n    negative: 'text-red-600',\n    neutral: 'text-gray-600'\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg p-4 shadow-sm border border-gray-200\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900 mt-1\">{value}</p>\n          <p className={`text-sm mt-1 ${changeColors[changeType]}`}>\n            {change}\n          </p>\n        </div>\n        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n          <i className={`${icon} text-blue-600 text-xl`}></i>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function StatsGrid() {\n  const { bots } = useBots();\n  \n  // Calculate real stats from bots data\n  const totalPnL = bots.reduce((sum, bot) => sum + (bot.performance?.pnl || 0), 0);\n  const activeBots = bots.filter(bot => bot.status === 'running').length;\n  const totalTrades = bots.reduce((sum, bot) => sum + (bot.performance?.totalTrades || 0), 0);\n  const winRate = bots.length > 0 \n    ? bots.reduce((sum, bot) => sum + (bot.performance?.winRate || 0), 0) / bots.length \n    : 0;\n\n  const stats = [\n    {\n      title: 'Total PnL',\n      value: `$${totalPnL.toFixed(2)}`,\n      change: totalPnL >= 0 ? '+8.2% today' : '-2.1% today',\n      changeType: totalPnL >= 0 ? 'positive' as const : 'negative' as const,\n      icon: 'ri-money-dollar-circle-line'\n    },\n    {\n      title: 'Active Bots',\n      value: activeBots.toString(),\n      change: `${bots.length} total`,\n      changeType: 'neutral' as const,\n      icon: 'ri-robot-line'\n    },\n    {\n      title: 'Win Rate',\n      value: `${winRate.toFixed(1)}%`,\n      change: '+2.1% this week',\n      changeType: 'positive' as const,\n      icon: 'ri-trophy-line'\n    },\n    {\n      title: 'Total Trades',\n      value: totalTrades.toString(),\n      change: '89 today',\n      changeType: 'neutral' as const,\n      icon: 'ri-exchange-line'\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 gap-4\">\n      {stats.map((stat, index) => (\n        <StatCard key={index} {...stat} />\n      ))}\n    </div>\n  );\n}\n","\nimport { TradingBot } from '../../../hooks/useBots';\nimport Card from '../../../components/base/Card';\nimport Button from '../../../components/base/Button';\nimport { useNavigate } from 'react-router-dom';\n\ninterface ActiveBotsProps {\n  bots: TradingBot[];\n}\n\nexport default function ActiveBots({ bots }: ActiveBotsProps) {\n  const navigate = useNavigate();\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'bg-green-100 text-green-800';\n      case 'paused':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'stopped':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getExchangeIcon = (exchange: string) => {\n    return exchange === 'bybit' ? 'ri-currency-line' : 'ri-exchange-line';\n  };\n\n  const getPnlColor = (pnl: number) => {\n    return pnl >= 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  const getPnLValue = (bot: TradingBot) => {\n    return bot.performance?.pnl || 0;\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Active Bots</h2>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => navigate('/create-bot')}\n        >\n          <i className=\"ri-add-line mr-1\"></i>\n          New Bot\n        </Button>\n      </div>\n\n      <div className=\"space-y-3\">\n        {bots.slice(0, 5).map((bot) => (\n          <div\n            key={bot.id}\n            className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <i\n                  className={`${getExchangeIcon(bot.exchange)} text-blue-600`}\n                ></i>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900\">{bot.name}</p>\n                <p className=\"text-sm text-gray-500\">\n                  {bot.symbol} â€¢ {bot.exchange.toUpperCase()}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"text-right\">\n              <div className=\"flex items-center space-x-2\">\n                <span\n                  className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(\n                    bot.status\n                  )}`}\n                >\n                  {bot.status}\n                </span>\n              </div>\n              <p\n                className={`text-sm font-medium mt-1 ${getPnlColor(getPnLValue(bot))}`}\n              >\n                {getPnLValue(bot) >= 0 ? '+' : ''}\n                {getPnLValue(bot).toFixed(2)}\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","\nimport { useState, useEffect } from 'react'\nimport { API_ENDPOINTS, apiCall } from '../lib/supabase'\n\nexport interface MarketData {\n  symbol: string\n  price: number\n  change24h: number\n  volume24h: number\n  high24h: number\n  low24h: number\n  timestamp: string\n  klines: Array<{\n    timestamp: string\n    open: number\n    high: number\n    low: number\n    close: number\n    volume: number\n  }>\n}\n\nexport function useMarketData(symbol: string = 'BTCUSDT', exchange: string = 'bybit') {\n  const [data, setData] = useState<MarketData | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchMarketData = async () => {\n    try {\n      setLoading(true)\n      const response = await apiCall(\n        `${API_ENDPOINTS.MARKET_DATA}?symbol=${symbol}&exchange=${exchange}`\n      )\n      setData(response)\n      setError(null)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch market data')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchMarketData()\n    \n    // Set up polling for real-time updates\n    const interval = setInterval(fetchMarketData, 30000) // Update every 30 seconds\n    \n    return () => clearInterval(interval)\n  }, [symbol, exchange])\n\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchMarketData,\n  }\n}\n","\nimport { MarketData } from '../../../hooks/useMarketData';\nimport Card from '../../../components/base/Card';\n\ninterface MarketOverviewProps {\n  marketData: MarketData[];\n}\n\nexport default function MarketOverview({ marketData }: MarketOverviewProps) {\n  const getChangeColor = (change: number) => {\n    return change >= 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  const formatPrice = (price: number) => {\n    return price.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4\n    });\n  };\n\n  if (!marketData || marketData.length === 0) {\n    return (\n      <Card>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Market Overview</h3>\n          <button className=\"text-blue-600 text-sm font-medium\">Refresh</button>\n        </div>\n        <div className=\"text-center py-8 text-gray-500\">\n          <i className=\"ri-line-chart-line text-4xl mb-2\"></i>\n          <p>No market data available</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Market Overview</h3>\n        <button className=\"text-blue-600 text-sm font-medium\">Refresh</button>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {marketData.slice(0, 6).map((market, index) => (\n          <div key={index} className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center\">\n                <i className=\"ri-currency-line text-orange-600 text-sm\"></i>\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900\">{market.symbol}</p>\n                <p className=\"text-xs text-gray-500\">Volume: {market.volume24h.toLocaleString()}</p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <p className=\"font-medium text-gray-900\">{formatPrice(market.price)}</p>\n              <p className={`text-sm ${getChangeColor(market.change24h)}`}>\n                {market.change24h >= 0 ? '+' : ''}{market.change24h.toFixed(2)}%\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","import { useState, useEffect } from 'react'\r\nimport { API_ENDPOINTS, apiCall } from '../lib/supabase'\r\n\r\nexport interface ExchangeBalance {\r\n  exchange: string\r\n  totalBalance: number\r\n  availableBalance: number\r\n  lockedBalance: number\r\n  assets: Array<{\r\n    asset: string\r\n    free: number\r\n    locked: number\r\n    total: number\r\n  }>\r\n  lastUpdated: string\r\n}\r\n\r\nexport function useExchangeBalance() {\r\n  const [balances, setBalances] = useState<ExchangeBalance[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const fetchBalances = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const response = await apiCall(`${API_ENDPOINTS.API_KEYS}/balances`)\r\n      setBalances(response.balances || [])\r\n      setError(null)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch balances')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchBalances()\r\n    \r\n    // Set up polling for real-time updates\r\n    const interval = setInterval(fetchBalances, 60000) // Update every minute\r\n    \r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return {\r\n    balances,\r\n    loading,\r\n    error,\r\n    refetch: fetchBalances,\r\n  }\r\n}\r\n","import { ExchangeBalance } from '../../../hooks/useExchangeBalance';\r\nimport Card from '../../../components/base/Card';\r\n\r\ninterface ExchangeBalanceProps {\r\n  balances: ExchangeBalance[];\r\n}\r\n\r\nexport default function ExchangeBalanceDisplay({ balances }: ExchangeBalanceProps) {\r\n  const formatBalance = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    }).format(amount);\r\n  };\r\n\r\n  const getExchangeIcon = (exchange: string) => {\r\n    switch (exchange.toLowerCase()) {\r\n      case 'bybit':\r\n        return 'ri-currency-line';\r\n      case 'okx':\r\n        return 'ri-exchange-line';\r\n      default:\r\n        return 'ri-exchange-line';\r\n    }\r\n  };\r\n\r\n  const getExchangeColor = (exchange: string) => {\r\n    switch (exchange.toLowerCase()) {\r\n      case 'bybit':\r\n        return 'text-yellow-600 bg-yellow-100';\r\n      case 'okx':\r\n        return 'text-blue-600 bg-blue-100';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  if (!balances || balances.length === 0) {\r\n    return (\r\n      <Card className=\"p-6\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">Exchange Balances</h3>\r\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\r\n        </div>\r\n        <div className=\"text-center py-8 text-gray-500\">\r\n          <i className=\"ri-wallet-line text-4xl mb-2\"></i>\r\n          <p>No exchange connections found</p>\r\n          <p className=\"text-sm\">Connect your exchange API keys to view balances</p>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-6\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900\">Exchange Balances</h3>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n          <span className=\"text-sm text-green-600\">Connected</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-4\">\r\n        {balances.map((balance, index) => (\r\n          <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\r\n            <div className=\"flex items-center justify-between mb-3\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getExchangeColor(balance.exchange)}`}>\r\n                  <i className={`${getExchangeIcon(balance.exchange)} text-lg`}></i>\r\n                </div>\r\n                <div>\r\n                  <h4 className=\"font-medium text-gray-900\">{balance.exchange.toUpperCase()}</h4>\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Updated {new Date(balance.lastUpdated).toLocaleTimeString()}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <p className=\"text-lg font-bold text-gray-900\">\r\n                  {formatBalance(balance.totalBalance)}\r\n                </p>\r\n                <p className=\"text-sm text-gray-500\">\r\n                  Available: {formatBalance(balance.availableBalance)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Top Assets */}\r\n            <div className=\"grid grid-cols-2 gap-2\">\r\n              {balance.assets.slice(0, 4).map((asset, assetIndex) => (\r\n                <div key={assetIndex} className=\"flex justify-between text-sm\">\r\n                  <span className=\"text-gray-600\">{asset.asset}</span>\r\n                  <span className=\"font-medium\">{asset.total.toFixed(4)}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n","\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Header from '../../components/feature/Header';\nimport Navigation from '../../components/feature/Navigation';\nimport StatsGrid from './components/StatsGrid';\nimport ActiveBots from './components/ActiveBots';\nimport MarketOverview from './components/MarketOverview';\nimport ExchangeBalance from './components/ExchangeBalance';\nimport Button from '../../components/base/Button';\nimport { useBots } from '../../hooks/useBots';\nimport { useMarketData } from '../../hooks/useMarketData';\nimport { useExchangeBalance } from '../../hooks/useExchangeBalance';\n\nexport default function Home() {\n  const navigate = useNavigate();\n  const [refreshing, setRefreshing] = useState(false);\n  const { bots, loading: botsLoading, fetchBots } = useBots();\n  const { data: btcData, loading: marketLoading, refetch: refetchMarket } = useMarketData('BTCUSDT', 'bybit');\n  const { balances, loading: balanceLoading, refetch: refetchBalances } = useExchangeBalance();\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    try {\n      await Promise.all([fetchBots(), refetchMarket(), refetchBalances()]);\n    } catch (error) {\n      console.error('Failed to refresh data:', error);\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  const handleCreateBot = () => {\n    navigate('/create-bot');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header \n        title=\"Pablo AI Trading\"\n        subtitle=\"Multi-Exchange Bot Platform\"\n        action={\n          <Button \n            size=\"sm\" \n            onClick={handleRefresh}\n            loading={refreshing}\n          >\n            <i className=\"ri-refresh-line mr-1\"></i>\n            Refresh\n          </Button>\n        }\n      />\n      \n      <div className=\"pt-20 pb-20 px-4 space-y-6\">\n        {/* Quick Actions */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-4 text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-lg font-semibold\">Ready to Trade?</h2>\n              <p className=\"text-blue-100 text-sm\">Create your first AI trading bot</p>\n            </div>\n            <Button \n              variant=\"secondary\" \n              size=\"sm\"\n              onClick={handleCreateBot}\n            >\n              <i className=\"ri-add-line mr-1\"></i>\n              New Bot\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <StatsGrid />\n\n        {/* Exchange Balances */}\n        <ExchangeBalance balances={balances} />\n\n        {/* Active Bots */}\n        <ActiveBots bots={bots} />\n\n        {/* Market Overview */}\n        <MarketOverview marketData={btcData ? [btcData] : []} />\n\n        {/* Exchange Status */}\n        <div className=\"bg-white rounded-lg p-4 shadow-sm border border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Exchange Status</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\">\n                  <i className=\"ri-currency-line text-yellow-600\"></i>\n                </div>\n                <span className=\"font-medium\">Bybit</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span className=\"text-sm text-green-600\">Connected</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <i className=\"ri-exchange-line text-blue-600\"></i>\n                </div>\n                <span className=\"font-medium\">OKX</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span className=\"text-sm text-green-600\">Connected</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Navigation />\n    </div>\n  );\n}\n"],"names":["StatCard","title","value","change","changeType","icon","changeColors","jsxs","jsx","StatsGrid","bots","useBots","totalPnL","sum","bot","activeBots","totalTrades","winRate","stats","stat","index","ActiveBots","navigate","useNavigate","getStatusColor","status","getExchangeIcon","exchange","getPnlColor","pnl","getPnLValue","Card","Button","useMarketData","symbol","data","setData","useState","loading","setLoading","error","setError","fetchMarketData","response","apiCall","API_ENDPOINTS","err","useEffect","interval","MarketOverview","marketData","getChangeColor","formatPrice","price","market","useExchangeBalance","balances","setBalances","fetchBalances","ExchangeBalanceDisplay","formatBalance","amount","getExchangeColor","balance","asset","assetIndex","Home","refreshing","setRefreshing","fetchBots","btcData","refetchMarket","refetchBalances","handleRefresh","handleCreateBot","Header","ExchangeBalance","Navigation"],"mappings":"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"}