{"version":3,"file":"page-9f76abe1.js","sources":["../../src/pages/edit-bot/page.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport Button from '../../components/base/Button';\nimport Card from '../../components/base/Card';\nimport Header from '../../components/feature/Header';\nimport type { TradingStrategy } from '../../types/trading';\nimport { useBots } from '../../hooks/useBots';\n\nexport default function EditBotPage() {\n  const navigate = useNavigate();\n  const { botId } = useParams<{ botId: string }>();\n  const { bots, updateBot } = useBots();\n  const [formData, setFormData] = useState({\n    name: '',\n    exchange: 'bybit' as 'bybit' | 'okx',\n    tradingType: 'spot' as 'spot' | 'futures',\n    symbol: 'BTCUSDT',\n    timeframe: '1h' as '1m' | '5m' | '15m' | '1h' | '2h' | '3h' | '4h' | '1d' | '1w',\n    leverage: 5,\n    riskLevel: 'medium' as 'low' | 'medium' | 'high',\n    tradeAmount: 100,\n    stopLoss: 2.0,\n    takeProfit: 4.0\n  });\n\n  const [strategy, setStrategy] = useState<TradingStrategy>({\n    rsiThreshold: 70,\n    adxThreshold: 25,\n    bbWidthThreshold: 0.02,\n    emaSlope: 0.5,\n    atrPercentage: 2.5,\n    vwapDistance: 1.2,\n    momentumThreshold: 0.8,\n    useMLPrediction: true,\n    minSamplesForML: 100\n  });\n\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const popularSymbols = [\n    'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT', 'AVAXUSDT',\n    'BNBUSDT', 'XRPUSDT', 'MATICUSDT', 'LINKUSDT', 'UNIUSDT', 'LTCUSDT'\n  ];\n\n  // Load bot data when component mounts\n  useEffect(() => {\n    if (botId && bots.length > 0) {\n      const bot = bots.find(b => b.id === botId);\n      console.log('Edit bot: Found bot:', bot);\n      if (bot) {\n        setFormData({\n          name: bot.name,\n          exchange: bot.exchange as 'bybit' | 'okx',\n          tradingType: bot.tradingType as 'spot' | 'futures',\n          symbol: bot.symbol,\n          timeframe: bot.timeframe || '1h',\n          leverage: bot.leverage || 5,\n          riskLevel: bot.riskLevel as 'low' | 'medium' | 'high',\n          tradeAmount: bot.tradeAmount || 100,\n          stopLoss: bot.stopLoss || 2.0,\n          takeProfit: bot.takeProfit || 4.0\n        });\n        \n        if (bot.strategy) {\n          setStrategy(bot.strategy as TradingStrategy);\n        }\n        console.log('Edit bot: Form data set:', formData);\n      } else {\n        console.log('Edit bot: Bot not found with ID:', botId);\n      }\n    }\n  }, [botId, bots]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!botId) return;\n    \n    setIsUpdating(true);\n    setError(null);\n    \n    try {\n      const botData = {\n        name: formData.name,\n        exchange: formData.exchange,\n        tradingType: formData.tradingType,\n        symbol: formData.symbol,\n        timeframe: formData.timeframe,\n        leverage: formData.leverage,\n        riskLevel: formData.riskLevel,\n        tradeAmount: formData.tradeAmount,\n        stopLoss: formData.stopLoss,\n        takeProfit: formData.takeProfit,\n        strategy: strategy\n      };\n      \n      console.log('Edit bot: Updating bot data:', botData);\n      console.log('Edit bot: Bot ID:', botId);\n      \n      await updateBot(botId, botData);\n      \n      console.log('Edit bot: Update successful, navigating...');\n      navigate('/bots', { state: { message: `Bot \"${formData.name}\" updated successfully!` } });\n    } catch (error: any) {\n      console.error('Edit bot: Update failed:', error);\n      setError(error.message || 'Failed to update bot');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleStrategyChange = (field: keyof TradingStrategy, value: any) => {\n    setStrategy(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (!botId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header title=\"Edit Bot\" />\n        <div className=\"pt-16 pb-6 px-4\">\n          <div className=\"max-w-2xl mx-auto\">\n            <Card>\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">Bot not found</p>\n                <Button variant=\"primary\" onClick={() => navigate('/bots')} className=\"mt-4\">\n                  Back to Bots\n                </Button>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header title=\"Edit Bot\" />\n      \n      <div className=\"pt-16 pb-6 px-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"flex items-center mb-6\">\n            <Button \n              variant=\"secondary\" \n              onClick={() => navigate('/bots')}\n              className=\"mr-4\"\n            >\n              <i className=\"ri-arrow-left-line mr-2\"></i>\n              Back to Bots\n            </Button>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Edit Trading Bot</h1>\n          </div>\n\n          <form onSubmit={handleSubmit}>\n            <Card>\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Bot Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Enter bot name\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Exchange\n                    </label>\n                    <select\n                      value={formData.exchange}\n                      onChange={(e) => handleInputChange('exchange', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value=\"bybit\">Bybit</option>\n                      <option value=\"okx\">OKX</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Trading Type\n                    </label>\n                    <select\n                      value={formData.tradingType}\n                      onChange={(e) => handleInputChange('tradingType', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value=\"spot\">Spot Trading</option>\n                      <option value=\"futures\">Futures Trading</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Trading Pair\n                    </label>\n                    <select\n                      value={formData.symbol}\n                      onChange={(e) => handleInputChange('symbol', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      {popularSymbols.map(symbol => (\n                        <option key={symbol} value={symbol}>{symbol}</option>\n                      ))}\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Time Frame\n                    </label>\n                    <select\n                      value={formData.timeframe}\n                      onChange={(e) => handleInputChange('timeframe', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value=\"1m\">1 Minute</option>\n                      <option value=\"5m\">5 Minutes</option>\n                      <option value=\"15m\">15 Minutes</option>\n                      <option value=\"1h\">1 Hour</option>\n                      <option value=\"2h\">2 Hours</option>\n                      <option value=\"3h\">3 Hours</option>\n                      <option value=\"4h\">4 Hours</option>\n                      <option value=\"1d\">1 Day</option>\n                      <option value=\"1w\">1 Week</option>\n                    </select>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Chart interval for technical analysis\n                    </p>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Leverage\n                    </label>\n                    <select\n                      value={formData.leverage}\n                      onChange={(e) => handleInputChange('leverage', parseInt(e.target.value))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value={1}>1x</option>\n                      <option value={2}>2x</option>\n                      <option value={3}>3x</option>\n                      <option value={5}>5x</option>\n                      <option value={10}>10x</option>\n                      <option value={20}>20x</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Risk Level\n                    </label>\n                    <select\n                      value={formData.riskLevel}\n                      onChange={(e) => handleInputChange('riskLevel', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      <option value=\"low\">Low Risk</option>\n                      <option value=\"medium\">Medium Risk</option>\n                      <option value=\"high\">High Risk</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Trade Amount (USD)\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={formData.tradeAmount}\n                      onChange={(e) => handleInputChange('tradeAmount', parseFloat(e.target.value))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      min=\"10\"\n                      max=\"10000\"\n                      step=\"10\"\n                      required\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Base trade amount in USD (will be multiplied by leverage and risk level)\n                    </p>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Stop Loss (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={formData.stopLoss}\n                      onChange={(e) => handleInputChange('stopLoss', parseFloat(e.target.value))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      min=\"0.5\"\n                      max=\"10\"\n                      step=\"0.5\"\n                      required\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Maximum loss percentage before closing position\n                    </p>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Take Profit (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={formData.takeProfit}\n                      onChange={(e) => handleInputChange('takeProfit', parseFloat(e.target.value))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      min=\"1\"\n                      max=\"20\"\n                      step=\"0.5\"\n                      required\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Target profit percentage before closing position\n                    </p>\n                  </div>\n                </div>\n\n                {/* Strategy Settings */}\n                <div className=\"border-t pt-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Strategy Settings</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        RSI Threshold\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.rsiThreshold}\n                        onChange={(e) => handleStrategyChange('rsiThreshold', parseInt(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"50\"\n                        max=\"90\"\n                        step=\"5\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        ADX Threshold\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.adxThreshold}\n                        onChange={(e) => handleStrategyChange('adxThreshold', parseInt(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"15\"\n                        max=\"50\"\n                        step=\"5\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Bollinger Band Width Threshold\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.bbWidthThreshold}\n                        onChange={(e) => handleStrategyChange('bbWidthThreshold', parseFloat(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"0.01\"\n                        max=\"0.1\"\n                        step=\"0.01\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        EMA Slope\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.emaSlope}\n                        onChange={(e) => handleStrategyChange('emaSlope', parseFloat(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"0.1\"\n                        max=\"2.0\"\n                        step=\"0.1\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        ATR Percentage\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.atrPercentage}\n                        onChange={(e) => handleStrategyChange('atrPercentage', parseFloat(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"1.0\"\n                        max=\"5.0\"\n                        step=\"0.5\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        VWAP Distance\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.vwapDistance}\n                        onChange={(e) => handleStrategyChange('vwapDistance', parseFloat(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"0.5\"\n                        max=\"3.0\"\n                        step=\"0.1\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Momentum Threshold\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.momentumThreshold}\n                        onChange={(e) => handleStrategyChange('momentumThreshold', parseFloat(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"0.5\"\n                        max=\"2.0\"\n                        step=\"0.1\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Min Samples for ML\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={strategy.minSamplesForML}\n                        onChange={(e) => handleStrategyChange('minSamplesForML', parseInt(e.target.value))}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        min=\"50\"\n                        max=\"1000\"\n                        step=\"50\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={strategy.useMLPrediction}\n                        onChange={(e) => handleStrategyChange('useMLPrediction', e.target.checked)}\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        Use Machine Learning Prediction\n                      </span>\n                    </label>\n                  </div>\n                </div>\n\n                {error && (\n                  <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                    <p className=\"text-red-600\">{error}</p>\n                  </div>\n                )}\n\n                <div className=\"flex space-x-4 pt-6 border-t\">\n                  <Button\n                    type=\"submit\"\n                    variant=\"primary\"\n                    className=\"flex-1\"\n                    disabled={isUpdating}\n                  >\n                    {isUpdating ? (\n                      <>\n                        <i className=\"ri-loader-4-line animate-spin mr-2\"></i>\n                        Updating Bot...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"ri-save-line mr-2\"></i>\n                        Update Bot\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => navigate('/bots')}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["EditBotPage","navigate","useNavigate","botId","useParams","bots","updateBot","useBots","formData","setFormData","useState","strategy","setStrategy","isUpdating","setIsUpdating","error","setError","popularSymbols","useEffect","bot","b","handleSubmit","e","botData","handleInputChange","field","value","prev","handleStrategyChange","jsxs","jsx","Header","Button","Card","symbol","Fragment"],"mappings":"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"}