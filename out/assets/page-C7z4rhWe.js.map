{"version":3,"file":"page-C7z4rhWe.js","sources":["../../src/hooks/useTrades.ts","../../src/pages/trades/page.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { API_ENDPOINTS, apiCall } from '../lib/supabase'\r\n\r\nexport interface Trade {\r\n  id: string\r\n  botId: string\r\n  symbol: string\r\n  side: 'long' | 'short'\r\n  size: number\r\n  entryPrice: number\r\n  exitPrice?: number\r\n  pnl?: number\r\n  status: 'open' | 'closed'\r\n  timestamp: string\r\n  exchange: string\r\n}\r\n\r\nexport function useTrades(botId?: string) {\r\n  const [trades, setTrades] = useState<Trade[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const fetchTrades = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const url = botId \r\n        ? `${API_ENDPOINTS.TRADING_ENGINE}/trades?botId=${botId}`\r\n        : `${API_ENDPOINTS.TRADING_ENGINE}/trades`\r\n      const response = await apiCall(url)\r\n      setTrades(response.trades || [])\r\n      setError(null)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch trades')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const closeTrade = async (tradeId: string, exitPrice: number) => {\r\n    try {\r\n      const response = await apiCall(`${API_ENDPOINTS.TRADING_ENGINE}/close-trade`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ tradeId, exitPrice }),\r\n      })\r\n      await fetchTrades() // Refresh the list\r\n      return response.trade\r\n    } catch (err) {\r\n      throw new Error(err instanceof Error ? err.message : 'Failed to close trade')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchTrades()\r\n    \r\n    // Set up polling for real-time updates\r\n    const interval = setInterval(fetchTrades, 30000) // Update every 30 seconds\r\n    \r\n    return () => clearInterval(interval)\r\n  }, [botId])\r\n\r\n  return {\r\n    trades,\r\n    loading,\r\n    error,\r\n    fetchTrades,\r\n    closeTrade,\r\n  }\r\n}\r\n","import { useState } from 'react';\nimport Header from '../../components/feature/Header';\nimport Navigation from '../../components/feature/Navigation';\nimport Card from '../../components/base/Card';\nimport { Trade } from '../../types/trading';\nimport { useTrades } from '../../hooks/useTrades';\nimport { useBots } from '../../hooks/useBots';\n\nexport default function Trades() {\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [selectedBot, setSelectedBot] = useState('all');\n  const { trades, loading: tradesLoading, fetchTrades } = useTrades();\n  const { bots } = useBots();\n\n  const filteredTrades = trades.filter(trade => {\n    if (selectedFilter !== 'all' && trade.status !== selectedFilter) return false;\n    if (selectedBot !== 'all' && trade.botId !== selectedBot) return false;\n    return true;\n  });\n\n  const getTradeStatusColor = (status: string) => {\n    switch (status) {\n      case 'open': return 'text-blue-600 bg-blue-50';\n      case 'closed': return 'text-green-600 bg-green-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getSideColor = (side: string) => {\n    return side === 'long' ? 'text-green-600' : 'text-red-600';\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4\n    }).format(price);\n  };\n\n  const formatPnL = (pnl?: number) => {\n    if (!pnl) return '-';\n    const color = pnl >= 0 ? 'text-green-600' : 'text-red-600';\n    const sign = pnl >= 0 ? '+' : '';\n    return (\n      <span className={color}>\n        {sign}{formatPrice(pnl)}\n      </span>\n    );\n  };\n\n  const getBotName = (botId: string) => {\n    const bot = bots.find(b => b.id === botId);\n    return bot?.name || 'Unknown Bot';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header title=\"Trades\" subtitle=\"Monitor your trading activity\" />\n      \n      <div className=\"pt-20 pb-20 px-4 space-y-4\">\n        {/* Filters */}\n        <Card className=\"p-4\">\n          <div className=\"space-y-4\">\n            {/* Status Filter */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\n              <div className=\"flex space-x-2\">\n                {['all', 'open', 'closed'].map((status) => (\n                  <button\n                    key={status}\n                    onClick={() => setSelectedFilter(status)}\n                    className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-colors ${\n                      selectedFilter === status\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    {status.charAt(0).toUpperCase() + status.slice(1)}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Bot Filter */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Bot</label>\n              <select\n                value={selectedBot}\n                onChange={(e) => setSelectedBot(e.target.value)}\n                className=\"w-full bg-gray-100 border-none rounded-lg px-3 py-2 text-sm\"\n              >\n                <option value=\"all\">All Bots</option>\n                {bots.map((bot) => (\n                  <option key={bot.id} value={bot.id}>\n                    {bot.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </Card>\n\n        {/* Trade Statistics */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Card className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-gray-900\">\n                {filteredTrades.length}\n              </div>\n              <div className=\"text-sm text-gray-500\">Total Trades</div>\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {filteredTrades.filter(t => t.status === 'open').length}\n              </div>\n              <div className=\"text-sm text-gray-500\">Active Trades</div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Trades List */}\n        <div className=\"space-y-3\">\n          {tradesLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">Loading trades...</p>\n            </div>\n          ) : filteredTrades.length === 0 ? (\n            <Card className=\"p-8 text-center\">\n              <i className=\"ri-file-list-line text-4xl text-gray-300 mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Trades Found</h3>\n              <p className=\"text-gray-500\">No trades match your current filters.</p>\n            </Card>\n          ) : (\n            filteredTrades.map((trade) => (\n              <Card key={trade.id} className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${getTradeStatusColor(trade.status)}`}>\n                      {trade.status.toUpperCase()}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {new Date(trade.timestamp).toLocaleDateString()}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {trade.symbol}\n                    </div>\n                    <div className=\"text-xs text-gray-500 capitalize\">\n                      {trade.exchange}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 mb-3\">\n                  <div>\n                    <div className=\"text-xs text-gray-500 mb-1\">Bot</div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {getBotName(trade.botId)}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-500 mb-1\">Side</div>\n                    <div className={`text-sm font-medium ${getSideColor(trade.side)}`}>\n                      {trade.side.toUpperCase()}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <div className=\"text-xs text-gray-500 mb-1\">Size</div>\n                    <div className=\"font-medium\">{trade.size}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-500 mb-1\">Entry Price</div>\n                    <div className=\"font-medium\">{formatPrice(trade.entryPrice)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-500 mb-1\">\n                      {trade.status === 'open' ? 'Current P&L' : 'P&L'}\n                    </div>\n                    <div className=\"font-medium\">\n                      {formatPnL(trade.pnl)}\n                    </div>\n                  </div>\n                </div>\n\n                {trade.exitPrice && (\n                  <div className=\"mt-3 pt-3 border-t border-gray-100\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Exit Price:</span>\n                      <span className=\"font-medium\">{formatPrice(trade.exitPrice)}</span>\n                    </div>\n                  </div>\n                )}\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Quick Actions */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <button className=\"bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg transition-colors flex items-center justify-center\">\n              <i className=\"ri-download-line mr-2\"></i>\n              Export Trades\n            </button>\n            <button className=\"bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 px-4 rounded-lg transition-colors flex items-center justify-center\">\n              <i className=\"ri-refresh-line mr-2\"></i>\n              Refresh Data\n            </button>\n          </div>\n        </Card>\n      </div>\n\n      <Navigation />\n    </div>\n  );\n}"],"names":["useTrades","botId","trades","setTrades","useState","loading","setLoading","error","setError","fetchTrades","url","API_ENDPOINTS","response","apiCall","err","closeTrade","tradeId","exitPrice","useEffect","interval","Trades","selectedFilter","setSelectedFilter","selectedBot","setSelectedBot","tradesLoading","bots","useBots","filteredTrades","trade","getTradeStatusColor","status","getSideColor","side","formatPrice","price","formatPnL","pnl","color","sign","jsxs","getBotName","b","jsx","Header","Card","e","bot","t","Navigation"],"mappings":"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"}