{"version":3,"file":"useBots-le-rFvjl.js","sources":["../../src/hooks/useBots.ts"],"sourcesContent":["\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport type { TradingBot } from '../types/trading';\n\nexport const useBots = () => {\n  const [bots, setBots] = useState<TradingBot[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchBots = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_PUBLIC_SUPABASE_URL}/functions/v1/bot-management`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Bot fetch error:', response.status, errorText);\n        throw new Error(`Failed to fetch bots: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setBots(Array.isArray(data.bots) ? data.bots : []);\n    } catch (err) {\n      console.error('Error fetching bots:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch bots');\n      setBots([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createBot = async (botData: Omit<TradingBot, 'id' | 'createdAt'>) => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      console.log('useBots: About to send bot data:', botData);\n      console.log('useBots: Exchange value:', botData.exchange, 'Type:', typeof botData.exchange);\n\n      const response = await fetch(`${import.meta.env.VITE_PUBLIC_SUPABASE_URL}/functions/v1/bot-management?action=create`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(botData),\n      });\n\n      console.log('useBots: Response status:', response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Bot creation error:', response.status, errorText);\n        throw new Error(`Failed to create bot: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (data.bot) {\n        setBots(prev => [data.bot, ...prev]);\n        return data.bot;\n      }\n      throw new Error('No bot data returned');\n    } catch (err) {\n      console.error('Error creating bot:', err);\n      throw err;\n    }\n  };\n\n  const startBot = async (botId: string) => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_PUBLIC_SUPABASE_URL}/functions/v1/bot-management?action=start`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ id: botId }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Bot start error:', response.status, errorText);\n        throw new Error(`Failed to start bot: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (data.bot) {\n        setBots(prev => prev.map(bot => bot.id === botId ? data.bot : bot));\n        return data.bot;\n      }\n      throw new Error('No bot data returned');\n    } catch (err) {\n      console.error('Error starting bot:', err);\n      throw err;\n    }\n  };\n\n  const stopBot = async (botId: string) => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_PUBLIC_SUPABASE_URL}/functions/v1/bot-management?action=stop`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ id: botId }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Bot stop error:', response.status, errorText);\n        throw new Error(`Failed to stop bot: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (data.bot) {\n        setBots(prev => prev.map(bot => bot.id === botId ? data.bot : bot));\n        return data.bot;\n      }\n      throw new Error('No bot data returned');\n    } catch (err) {\n      console.error('Error stopping bot:', err);\n      throw err;\n    }\n  };\n\n  const updateBot = async (botId: string, updates: Partial<TradingBot>) => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_PUBLIC_SUPABASE_URL}/functions/v1/bot-management?action=update`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id: botId,\n          ...updates\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Bot update error:', response.status, errorText);\n        throw new Error(`Failed to update bot: ${response.status}`);\n      }\n\n      const data = await response.json();\n      if (data.bot) {\n        setBots(prev => prev.map(bot => bot.id === botId ? data.bot : bot));\n        return data.bot;\n      }\n      throw new Error('No bot data returned');\n    } catch (err) {\n      console.error('Error updating bot:', err);\n      throw err;\n    }\n  };\n\n  const deleteBot = async (botId: string) => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_PUBLIC_SUPABASE_URL}/functions/v1/bot-management`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id: botId\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Bot deletion error:', response.status, errorText);\n        throw new Error(`Failed to delete bot: ${response.status}`);\n      }\n\n      setBots(prev => prev.filter(bot => bot.id !== botId));\n    } catch (err) {\n      console.error('Error deleting bot:', err);\n      throw err;\n    }\n  };\n\n  useEffect(() => {\n    fetchBots();\n  }, []);\n\n  return {\n    bots,\n    loading,\n    error,\n    fetchBots,\n    createBot,\n    startBot,\n    stopBot,\n    updateBot,\n    deleteBot,\n  };\n};"],"names":["useBots","bots","setBots","useState","loading","setLoading","error","setError","fetchBots","session","supabase","response","errorText","data","err","createBot","botData","prev","startBot","botId","bot","stopBot","updateBot","updates","deleteBot","useEffect"],"mappings":"+CAKO,MAAMA,EAAU,IAAM,CAC3B,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAAuB,CAAA,CAAE,EAC3C,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAI,EACrC,CAACG,EAAOC,CAAQ,EAAIJ,EAAAA,SAAwB,IAAI,EAEhDK,EAAY,SAAY,CAC5B,GAAI,CACFH,EAAW,EAAI,EACfE,EAAS,IAAI,EAEb,KAAM,CAAE,KAAM,CAAE,QAAAE,CAAA,GAAc,MAAMC,EAAS,KAAK,WAAA,EAElD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,mBAAmB,EAGrC,MAAME,EAAW,MAAM,MAAM,uEAA2E,CACtG,OAAQ,MACR,QAAS,CACP,cAAiB,UAAUF,EAAQ,YAAY,GAC/C,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAACE,EAAS,GAAI,CAChB,MAAMC,EAAY,MAAMD,EAAS,KAAA,EACjC,cAAQ,MAAM,mBAAoBA,EAAS,OAAQC,CAAS,EACtD,IAAI,MAAM,yBAAyBD,EAAS,MAAM,EAAE,CAC5D,CAEA,MAAME,EAAO,MAAMF,EAAS,KAAA,EAC5BT,EAAQ,MAAM,QAAQW,EAAK,IAAI,EAAIA,EAAK,KAAO,EAAE,CACnD,OAASC,EAAK,CACZ,QAAQ,MAAM,uBAAwBA,CAAG,EACzCP,EAASO,aAAe,MAAQA,EAAI,QAAU,sBAAsB,EACpEZ,EAAQ,CAAA,CAAE,CACZ,QAAA,CACEG,EAAW,EAAK,CAClB,CACF,EAEMU,EAAY,MAAOC,GAAkD,CACzE,GAAI,CACF,KAAM,CAAE,KAAM,CAAE,QAAAP,CAAA,GAAc,MAAMC,EAAS,KAAK,WAAA,EAElD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,mBAAmB,EAGrC,QAAQ,IAAI,mCAAoCO,CAAO,EACvD,QAAQ,IAAI,2BAA4BA,EAAQ,SAAU,QAAS,OAAOA,EAAQ,QAAQ,EAE1F,MAAML,EAAW,MAAM,MAAM,qFAAyF,CACpH,OAAQ,OACR,QAAS,CACP,cAAiB,UAAUF,EAAQ,YAAY,GAC/C,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAUO,CAAO,CAAA,CAC7B,EAID,GAFA,QAAQ,IAAI,4BAA6BL,EAAS,MAAM,EAEpD,CAACA,EAAS,GAAI,CAChB,MAAMC,EAAY,MAAMD,EAAS,KAAA,EACjC,cAAQ,MAAM,sBAAuBA,EAAS,OAAQC,CAAS,EACzD,IAAI,MAAM,yBAAyBD,EAAS,MAAM,EAAE,CAC5D,CAEA,MAAME,EAAO,MAAMF,EAAS,KAAA,EAC5B,GAAIE,EAAK,IACP,OAAAX,KAAgB,CAACW,EAAK,IAAK,GAAGI,CAAI,CAAC,EAC5BJ,EAAK,IAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,OAASC,EAAK,CACZ,cAAQ,MAAM,sBAAuBA,CAAG,EAClCA,CACR,CACF,EAEMI,EAAW,MAAOC,GAAkB,CACxC,GAAI,CACF,KAAM,CAAE,KAAM,CAAE,QAAAV,CAAA,GAAc,MAAMC,EAAS,KAAK,WAAA,EAElD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,mBAAmB,EAGrC,MAAME,EAAW,MAAM,MAAM,oFAAwF,CACnH,OAAQ,OACR,QAAS,CACP,cAAiB,UAAUF,EAAQ,YAAY,GAC/C,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAU,CAAE,GAAIU,EAAO,CAAA,CACnC,EAED,GAAI,CAACR,EAAS,GAAI,CAChB,MAAMC,EAAY,MAAMD,EAAS,KAAA,EACjC,cAAQ,MAAM,mBAAoBA,EAAS,OAAQC,CAAS,EACtD,IAAI,MAAM,wBAAwBD,EAAS,MAAM,EAAE,CAC3D,CAEA,MAAME,EAAO,MAAMF,EAAS,KAAA,EAC5B,GAAIE,EAAK,IACP,OAAAX,EAAQe,GAAQA,EAAK,IAAIG,GAAOA,EAAI,KAAOD,EAAQN,EAAK,IAAMO,CAAG,CAAC,EAC3DP,EAAK,IAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,OAASC,EAAK,CACZ,cAAQ,MAAM,sBAAuBA,CAAG,EAClCA,CACR,CACF,EAEMO,EAAU,MAAOF,GAAkB,CACvC,GAAI,CACF,KAAM,CAAE,KAAM,CAAE,QAAAV,CAAA,GAAc,MAAMC,EAAS,KAAK,WAAA,EAElD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,mBAAmB,EAGrC,MAAME,EAAW,MAAM,MAAM,mFAAuF,CAClH,OAAQ,OACR,QAAS,CACP,cAAiB,UAAUF,EAAQ,YAAY,GAC/C,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAU,CAAE,GAAIU,EAAO,CAAA,CACnC,EAED,GAAI,CAACR,EAAS,GAAI,CAChB,MAAMC,EAAY,MAAMD,EAAS,KAAA,EACjC,cAAQ,MAAM,kBAAmBA,EAAS,OAAQC,CAAS,EACrD,IAAI,MAAM,uBAAuBD,EAAS,MAAM,EAAE,CAC1D,CAEA,MAAME,EAAO,MAAMF,EAAS,KAAA,EAC5B,GAAIE,EAAK,IACP,OAAAX,EAAQe,GAAQA,EAAK,IAAIG,GAAOA,EAAI,KAAOD,EAAQN,EAAK,IAAMO,CAAG,CAAC,EAC3DP,EAAK,IAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,OAASC,EAAK,CACZ,cAAQ,MAAM,sBAAuBA,CAAG,EAClCA,CACR,CACF,EAEMQ,EAAY,MAAOH,EAAeI,IAAiC,CACvE,GAAI,CACF,KAAM,CAAE,KAAM,CAAE,QAAAd,CAAA,GAAc,MAAMC,EAAS,KAAK,WAAA,EAElD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,mBAAmB,EAGrC,MAAME,EAAW,MAAM,MAAM,qFAAyF,CACpH,OAAQ,OACR,QAAS,CACP,cAAiB,UAAUF,EAAQ,YAAY,GAC/C,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAU,CACnB,GAAIU,EACJ,GAAGI,CAAA,CACJ,CAAA,CACF,EAED,GAAI,CAACZ,EAAS,GAAI,CAChB,MAAMC,EAAY,MAAMD,EAAS,KAAA,EACjC,cAAQ,MAAM,oBAAqBA,EAAS,OAAQC,CAAS,EACvD,IAAI,MAAM,yBAAyBD,EAAS,MAAM,EAAE,CAC5D,CAEA,MAAME,EAAO,MAAMF,EAAS,KAAA,EAC5B,GAAIE,EAAK,IACP,OAAAX,EAAQe,GAAQA,EAAK,IAAIG,GAAOA,EAAI,KAAOD,EAAQN,EAAK,IAAMO,CAAG,CAAC,EAC3DP,EAAK,IAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,OAASC,EAAK,CACZ,cAAQ,MAAM,sBAAuBA,CAAG,EAClCA,CACR,CACF,EAEMU,EAAY,MAAOL,GAAkB,CACzC,GAAI,CACF,KAAM,CAAE,KAAM,CAAE,QAAAV,CAAA,GAAc,MAAMC,EAAS,KAAK,WAAA,EAElD,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,mBAAmB,EAGrC,MAAME,EAAW,MAAM,MAAM,uEAA2E,CACtG,OAAQ,SACR,QAAS,CACP,cAAiB,UAAUF,EAAQ,YAAY,GAC/C,eAAgB,kBAAA,EAElB,KAAM,KAAK,UAAU,CACnB,GAAIU,CAAA,CACL,CAAA,CACF,EAED,GAAI,CAACR,EAAS,GAAI,CAChB,MAAMC,EAAY,MAAMD,EAAS,KAAA,EACjC,cAAQ,MAAM,sBAAuBA,EAAS,OAAQC,CAAS,EACzD,IAAI,MAAM,yBAAyBD,EAAS,MAAM,EAAE,CAC5D,CAEAT,KAAgBe,EAAK,UAAcG,EAAI,KAAOD,CAAK,CAAC,CACtD,OAASL,EAAK,CACZ,cAAQ,MAAM,sBAAuBA,CAAG,EAClCA,CACR,CACF,EAEAW,OAAAA,EAAAA,UAAU,IAAM,CACdjB,EAAA,CACF,EAAG,CAAA,CAAE,EAEE,CACL,KAAAP,EACA,QAAAG,EACA,MAAAE,EACA,UAAAE,EACA,UAAAO,EACA,SAAAG,EACA,QAAAG,EACA,UAAAC,EACA,UAAAE,CAAA,CAEJ"}