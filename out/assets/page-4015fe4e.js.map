{"version":3,"file":"page-4015fe4e.js","sources":["../../src/pages/backtest/page.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Card from '../../components/base/Card';\r\nimport Button from '../../components/base/Button';\r\nimport Header from '../../components/feature/Header';\r\nimport type { TradingStrategy, AdvancedStrategyConfig } from '../../types/trading';\r\n\r\ninterface BacktestConfig {\r\n  name: string;\r\n  symbols: string[];\r\n  customPairs: string;\r\n  useCustomPairs: boolean;\r\n  exchange: 'bybit' | 'okx';\r\n  tradingType: 'spot' | 'futures';\r\n  timeframe: string;\r\n  leverage: number;\r\n  riskLevel: 'low' | 'medium' | 'high';\r\n  tradeAmount: number;\r\n  stopLoss: number;\r\n  takeProfit: number;\r\n  startDate: string;\r\n  endDate: string;\r\n}\r\n\r\nexport default function BacktestPage() {\r\n  const navigate = useNavigate();\r\n  const [config, setConfig] = useState<BacktestConfig>({\r\n    name: '',\r\n    symbols: ['BTCUSDT'],\r\n    customPairs: '',\r\n    useCustomPairs: false,\r\n    exchange: 'bybit',\r\n    tradingType: 'futures',\r\n    timeframe: '1h',\r\n    leverage: 5,\r\n    riskLevel: 'medium',\r\n    tradeAmount: 100,\r\n    stopLoss: 2.0,\r\n    takeProfit: 4.0,\r\n    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days ago\r\n    endDate: new Date().toISOString().split('T')[0], // Today\r\n  });\r\n\r\n  const [strategy, setStrategy] = useState<TradingStrategy>({\r\n    rsiThreshold: 70,\r\n    adxThreshold: 25,\r\n    bbWidthThreshold: 0.02,\r\n    emaSlope: 0.5,\r\n    atrPercentage: 2.5,\r\n    vwapDistance: 1.2,\r\n    momentumThreshold: 0.8,\r\n    useMLPrediction: true,\r\n    minSamplesForML: 100\r\n  });\r\n\r\n  const [advancedConfig, setAdvancedConfig] = useState<AdvancedStrategyConfig>({\r\n    bias_mode: 'auto',\r\n    htf_timeframe: '4h',\r\n    htf_trend_indicator: 'EMA200',\r\n    ema_fast_period: 50,\r\n    require_price_vs_trend: 'any',\r\n    adx_min_htf: 23,\r\n    require_adx_rising: true,\r\n    regime_mode: 'auto',\r\n    adx_trend_min: 25,\r\n    adx_meanrev_max: 19,\r\n    session_filter_enabled: false,\r\n    allowed_hours_utc: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],\r\n    cooldown_bars: 8,\r\n    atr_percentile_min: 20,\r\n    bb_width_min: 0.012,\r\n    bb_width_max: 0.03,\r\n    min_24h_volume_usd: 500000000,\r\n    max_spread_bps: 3,\r\n    risk_per_trade_pct: 0.75,\r\n    daily_loss_limit_pct: 3.0,\r\n    weekly_loss_limit_pct: 6.0,\r\n    max_trades_per_day: 8,\r\n    max_concurrent: 2,\r\n    sl_atr_mult: 1.3,\r\n    tp1_r: 1.0,\r\n    tp2_r: 2.0,\r\n    tp1_size: 0.5,\r\n    breakeven_at_r: 0.8,\r\n    trail_after_tp1_atr: 1.0,\r\n    time_stop_hours: 48,\r\n    rsi_period: 14,\r\n    rsi_oversold: 30,\r\n    rsi_overbought: 70,\r\n    use_ml_prediction: true,\r\n    ml_confidence_threshold: 0.6,\r\n    ml_min_samples: 100\r\n  });\r\n\r\n  const [showAdvanced, setShowAdvanced] = useState(false);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [backtestId, setBacktestId] = useState<string | null>(null);\r\n  const [results, setResults] = useState<any>(null);\r\n  const [showCreateBot, setShowCreateBot] = useState(false);\r\n  const [botName, setBotName] = useState('');\r\n\r\n  const handleStrategyChange = (field: keyof TradingStrategy, value: any) => {\r\n    setStrategy(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const handleCreateBotFromResults = async () => {\r\n    if (!results || !botName.trim()) {\r\n      alert('Please enter a bot name');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Navigate to create bot page with pre-filled data\r\n      navigate('/create-bot', { \r\n        state: { \r\n          fromBacktest: true,\r\n          backtestResults: results,\r\n          botName: botName,\r\n          backtestConfig: config,\r\n          backtestStrategy: strategy,\r\n          backtestAdvancedConfig: advancedConfig\r\n        } \r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating bot from results:', error);\r\n      alert('Failed to create bot. Please try again.');\r\n    }\r\n  };\r\n\r\n  const popularSymbols = [\r\n    'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT', 'AVAXUSDT',\r\n    'BNBUSDT', 'XRPUSDT', 'MATICUSDT', 'LINKUSDT', 'UNIUSDT', 'LTCUSDT'\r\n  ];\r\n\r\n  const handleStartBacktest = async () => {\r\n    setIsRunning(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Parse custom pairs if enabled\r\n      let symbols: string[] = [];\r\n      if (config.useCustomPairs && config.customPairs.trim()) {\r\n        symbols = config.customPairs\r\n          .split(/[\\n,]/)\r\n          .map(pair => pair.trim().toUpperCase())\r\n          .filter(pair => pair.length > 0);\r\n        \r\n        if (symbols.length === 0) {\r\n          throw new Error('Please enter at least one trading pair');\r\n        }\r\n      } else {\r\n        symbols = config.symbols;\r\n      }\r\n\r\n      const backtestData = {\r\n        name: config.name,\r\n        symbols,\r\n        customPairs: config.useCustomPairs ? config.customPairs : undefined,\r\n        exchange: config.exchange,\r\n        tradingType: config.tradingType,\r\n        timeframe: config.timeframe,\r\n        leverage: config.leverage,\r\n        riskLevel: config.riskLevel,\r\n        tradeAmount: config.tradeAmount,\r\n        stopLoss: config.stopLoss,\r\n        takeProfit: config.takeProfit,\r\n        strategy,\r\n        strategyConfig: advancedConfig,\r\n        startDate: config.startDate,\r\n        endDate: config.endDate,\r\n      };\r\n\r\n      console.log('Starting backtest with data:', backtestData);\r\n      \r\n      // Simulate backtest execution with delay\r\n      setIsRunning(true);\r\n      setProgress(0);\r\n      \r\n      // Simulate progress\r\n      const progressInterval = setInterval(() => {\r\n        setProgress(prev => {\r\n          if (prev >= 90) {\r\n            clearInterval(progressInterval);\r\n            return prev;\r\n          }\r\n          return prev + Math.random() * 10;\r\n        });\r\n      }, 200);\r\n      \r\n      // Simulate backtest running...\r\n      setTimeout(() => {\r\n        clearInterval(progressInterval);\r\n        setProgress(100);\r\n        \r\n        // Demo results - replace with actual API call later\r\n        const demoResults = {\r\n          total_trades: 127,\r\n          winning_trades: 78,\r\n          losing_trades: 49,\r\n          win_rate: 61.4,\r\n          total_pnl: 3428.75,\r\n          total_pnl_percentage: 34.3,\r\n          max_drawdown: -12.5,\r\n          sharpe_ratio: 1.85,\r\n          profit_factor: 1.92,\r\n          results_per_pair: {\r\n            'BTCUSDT': { trades: 45, win_rate: 68.9, pnl: 1520.30 },\r\n            'ETHUSDT': { trades: 38, win_rate: 57.9, pnl: 980.15 },\r\n            'SOLUSDT': { trades: 29, win_rate: 62.1, pnl: 678.50 },\r\n            'ADAUSDT': { trades: 15, win_rate: 53.3, pnl: 249.80 }\r\n          }\r\n        };\r\n        \r\n        setResults(demoResults);\r\n        setIsRunning(false);\r\n      }, 2000);\r\n      \r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to start backtest');\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <Header title=\"Multiple Pairs Backtesting\" />\r\n      \r\n      <div className=\"pt-16 pb-6 px-4\">\r\n        <div className=\"max-w-3xl mx-auto\">\r\n          <Card className=\"p-6\">\r\n            <h2 className=\"text-2xl font-bold mb-6\">📊 New Backtest</h2>\r\n\r\n            {/* Backtest Name */}\r\n            <div className=\"mb-6\">\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Backtest Name\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={config.name}\r\n                onChange={(e) => setConfig(prev => ({ ...prev, name: e.target.value }))}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                placeholder=\"Enter backtest name\"\r\n                required\r\n              />\r\n            </div>\r\n\r\n            {/* Trading Pairs Section */}\r\n            <div className=\"mb-6\">\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                📈 Trading Pairs to Test\r\n              </label>\r\n              <div className=\"space-y-3\">\r\n                <div className=\"flex items-center\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"pairMode\"\r\n                    checked={!config.useCustomPairs}\r\n                    onChange={() => setConfig(prev => ({ ...prev, useCustomPairs: false }))}\r\n                    className=\"mr-2\"\r\n                  />\r\n                  <label className=\"text-sm text-gray-700\">Select from popular pairs</label>\r\n                </div>\r\n                \r\n                {!config.useCustomPairs ? (\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\r\n                    {popularSymbols.map(symbol => (\r\n                      <button\r\n                        key={symbol}\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          const newSymbols = config.symbols.includes(symbol)\r\n                            ? config.symbols.filter(s => s !== symbol)\r\n                            : [...config.symbols, symbol];\r\n                          setConfig(prev => ({ ...prev, symbols: newSymbols }));\r\n                        }}\r\n                        className={`px-3 py-2 rounded-lg border-2 ${\r\n                          config.symbols.includes(symbol)\r\n                            ? 'border-blue-500 bg-blue-50 text-blue-700'\r\n                            : 'border-gray-300 hover:border-gray-400'\r\n                        }`}\r\n                      >\r\n                        {symbol}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <textarea\r\n                    value={config.customPairs}\r\n                    onChange={(e) => setConfig(prev => ({ ...prev, customPairs: e.target.value }))}\r\n                    placeholder=\"Enter pairs separated by comma or new line&#10;Example: BTCUSDT, ETHUSDT, SOLUSDT\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    rows={4}\r\n                  />\r\n                )}\r\n                \r\n                <div className=\"flex items-center\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"pairMode\"\r\n                    checked={config.useCustomPairs}\r\n                    onChange={() => setConfig(prev => ({ ...prev, useCustomPairs: true }))}\r\n                    className=\"mr-2\"\r\n                  />\r\n                  <label className=\"text-sm text-gray-700\">Use custom pairs</label>\r\n                </div>\r\n\r\n                {config.symbols.length > 0 && (\r\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\r\n                    <p className=\"text-sm text-blue-700\">\r\n                      ✅ Selected {config.symbols.length} pair{config.symbols.length !== 1 ? 's' : ''}: {config.symbols.join(', ')}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Date Range */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Start Date\r\n                </label>\r\n                <input\r\n                  type=\"date\"\r\n                  value={config.startDate}\r\n                  onChange={(e) => setConfig(prev => ({ ...prev, startDate: e.target.value }))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  End Date\r\n                </label>\r\n                <input\r\n                  type=\"date\"\r\n                  value={config.endDate}\r\n                  onChange={(e) => setConfig(prev => ({ ...prev, endDate: e.target.value }))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Exchange & Trading Type */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Exchange\r\n                </label>\r\n                <select\r\n                  value={config.exchange}\r\n                  onChange={(e) => setConfig(prev => ({ ...prev, exchange: e.target.value as any }))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                >\r\n                  <option value=\"bybit\">Bybit</option>\r\n                  <option value=\"okx\">OKX</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Trading Type\r\n                </label>\r\n                <select\r\n                  value={config.tradingType}\r\n                  onChange={(e) => setConfig(prev => ({ ...prev, tradingType: e.target.value as any }))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                >\r\n                  <option value=\"spot\">Spot Trading</option>\r\n                  <option value=\"futures\">Futures Trading</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Strategy Parameters Section */}\r\n            <Card className=\"p-6 mt-6\">\r\n              <h2 className=\"text-lg font-semibold mb-4 text-gray-900\">Strategy Parameters</h2>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    RSI Threshold\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={strategy.rsiThreshold}\r\n                    onChange={(e) => handleStrategyChange('rsiThreshold', parseFloat(e.target.value))}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    min=\"30\"\r\n                    max=\"90\"\r\n                    step=\"5\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    ADX Threshold\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={strategy.adxThreshold}\r\n                    onChange={(e) => handleStrategyChange('adxThreshold', parseFloat(e.target.value))}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    min=\"10\"\r\n                    max=\"50\"\r\n                    step=\"5\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    BB Width Threshold\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={strategy.bbWidthThreshold}\r\n                    onChange={(e) => handleStrategyChange('bbWidthThreshold', parseFloat(e.target.value))}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    min=\"0.01\"\r\n                    max=\"0.1\"\r\n                    step=\"0.005\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    ATR Percentage\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={strategy.atrPercentage}\r\n                    onChange={(e) => handleStrategyChange('atrPercentage', parseFloat(e.target.value))}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    min=\"1\"\r\n                    max=\"10\"\r\n                    step=\"0.5\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"mt-4\">\r\n                <label className=\"flex items-center\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={strategy.useMLPrediction}\r\n                    onChange={(e) => handleStrategyChange('useMLPrediction', e.target.checked)}\r\n                    className=\"mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                  />\r\n                  <span className=\"text-sm font-medium text-gray-700\">\r\n                    Enable ML Prediction\r\n                  </span>\r\n                </label>\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Advanced Strategy Configuration */}\r\n            <Card className=\"p-6 mt-6\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setShowAdvanced(!showAdvanced)}\r\n                className=\"w-full flex items-center justify-between text-left\"\r\n              >\r\n                <h2 className=\"text-lg font-semibold text-gray-900\">\r\n                  ⚙️ Advanced Strategy Configuration\r\n                </h2>\r\n                <i className={`ri-arrow-${showAdvanced ? 'up' : 'down'}-s-line text-2xl text-gray-600`}></i>\r\n              </button>\r\n              \r\n              {showAdvanced && (\r\n                <div className=\"mt-6 space-y-4\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                        Risk Per Trade (%)\r\n                      </label>\r\n                      <input\r\n                        type=\"range\"\r\n                        value={advancedConfig.risk_per_trade_pct}\r\n                        onChange={(e) => setAdvancedConfig(prev => ({ ...prev, risk_per_trade_pct: parseFloat(e.target.value) }))}\r\n                        className=\"w-full\"\r\n                        min=\"0.25\"\r\n                        max=\"2.0\"\r\n                        step=\"0.25\"\r\n                      />\r\n                      <p className=\"text-xs text-gray-500\">{advancedConfig.risk_per_trade_pct}%</p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                        Max Trades/Day\r\n                      </label>\r\n                      <input\r\n                        type=\"range\"\r\n                        value={advancedConfig.max_trades_per_day}\r\n                        onChange={(e) => setAdvancedConfig(prev => ({ ...prev, max_trades_per_day: parseInt(e.target.value) }))}\r\n                        className=\"w-full\"\r\n                        min=\"2\"\r\n                        max=\"20\"\r\n                        step=\"1\"\r\n                      />\r\n                      <p className=\"text-xs text-gray-500\">{advancedConfig.max_trades_per_day}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Card>\r\n\r\n            {error && (\r\n              <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n                <p className=\"text-red-700\">{error}</p>\r\n              </div>\r\n            )}\r\n\r\n            {/* Results Section */}\r\n            {results && (\r\n              <Card className=\"p-6 mt-6 bg-green-50 border-green-200\">\r\n                <h3 className=\"text-lg font-semibold mb-4 text-gray-900\">📊 Backtest Results</h3>\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                  <div className=\"bg-white rounded-lg p-3\">\r\n                    <div className=\"text-2xl font-bold text-blue-600\">{results.total_trades || 0}</div>\r\n                    <div className=\"text-sm text-gray-500\">Total Trades</div>\r\n                  </div>\r\n                  <div className=\"bg-white rounded-lg p-3\">\r\n                    <div className=\"text-2xl font-bold text-green-600\">{(results.win_rate || 0).toFixed(1)}%</div>\r\n                    <div className=\"text-sm text-gray-500\">Win Rate</div>\r\n                  </div>\r\n                  <div className=\"bg-white rounded-lg p-3\">\r\n                    <div className=\"text-2xl font-bold text-purple-600\">${(results.total_pnl || 0).toFixed(2)}</div>\r\n                    <div className=\"text-sm text-gray-500\">Total PnL</div>\r\n                  </div>\r\n                  <div className=\"bg-white rounded-lg p-3\">\r\n                    <div className=\"text-2xl font-bold text-orange-600\">{(results.sharpe_ratio || 0).toFixed(2)}</div>\r\n                    <div className=\"text-sm text-gray-500\">Sharpe Ratio</div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Per-Pair Results */}\r\n                {results.results_per_pair && Object.keys(results.results_per_pair).length > 0 && (\r\n                  <div className=\"mt-6\">\r\n                    <h4 className=\"font-semibold mb-3\">Performance by Pair</h4>\r\n                    <div className=\"space-y-2\">\r\n                      {Object.entries(results.results_per_pair).map(([pair, data]: [string, any]) => (\r\n                        <div key={pair} className=\"bg-white rounded-lg p-3 flex justify-between items-center\">\r\n                          <div>\r\n                            <div className=\"font-medium\">{pair}</div>\r\n                            <div className=\"text-sm text-gray-500\">{data.trades || 0} trades</div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <div className={`font-bold ${(data.pnl || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                              ${(data.pnl || 0).toFixed(2)}\r\n                            </div>\r\n                            <div className=\"text-sm text-gray-500\">{(data.win_rate || 0).toFixed(1)}% win</div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Create Bot from Results Button */}\r\n                <div className=\"mt-6 pt-6 border-t border-green-300\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"primary\"\r\n                    onClick={() => setShowCreateBot(true)}\r\n                    className=\"w-full\"\r\n                  >\r\n                    <i className=\"ri-robot-add-line mr-2\"></i>\r\n                    Create Trading Bot from This Backtest\r\n                  </Button>\r\n                </div>\r\n              </Card>\r\n            )}\r\n\r\n            {/* Create Bot Modal */}\r\n            {showCreateBot && (\r\n              <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n                <Card className=\"w-full max-w-md p-6\">\r\n                  <h3 className=\"text-lg font-semibold mb-4\">Create Trading Bot from Backtest</h3>\r\n                  <p className=\"text-sm text-gray-600 mb-4\">\r\n                    Use this successful backtest to create a live trading bot with the same strategy.\r\n                  </p>\r\n                  \r\n                  <div className=\"mb-4\">\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Bot Name\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={botName}\r\n                      onChange={(e) => setBotName(e.target.value)}\r\n                      placeholder=\"Enter bot name\"\r\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                      required\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\r\n                    <div className=\"bg-gray-50 p-3 rounded-lg\">\r\n                      <div className=\"text-gray-500\">Win Rate</div>\r\n                      <div className=\"text-xl font-bold text-green-600\">{results?.win_rate?.toFixed(1)}%</div>\r\n                    </div>\r\n                    <div className=\"bg-gray-50 p-3 rounded-lg\">\r\n                      <div className=\"text-gray-500\">Total PnL</div>\r\n                      <div className=\"text-xl font-bold text-purple-600\">${results?.total_pnl?.toFixed(2)}</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex gap-3\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"secondary\"\r\n                      onClick={() => setShowCreateBot(false)}\r\n                      className=\"flex-1\"\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"primary\"\r\n                      onClick={handleCreateBotFromResults}\r\n                      className=\"flex-1\"\r\n                      disabled={!botName.trim()}\r\n                    >\r\n                      Create Bot\r\n                    </Button>\r\n                  </div>\r\n                </Card>\r\n              </div>\r\n            )}\r\n\r\n            {/* Action Buttons */}\r\n            <div className=\"flex gap-4 mt-6\">\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"secondary\"\r\n                onClick={() => navigate('/bots')}\r\n                className=\"flex-1\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"primary\"\r\n                onClick={handleStartBacktest}\r\n                loading={isRunning}\r\n                className=\"flex-1\"\r\n              >\r\n                {isRunning ? 'Running Backtest...' : '🚀 Start Backtest'}\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Progress Bar */}\r\n            {isRunning && (\r\n              <Card className=\"p-6 mt-6\">\r\n                <div className=\"mb-2 flex justify-between\">\r\n                  <span className=\"text-sm font-medium text-gray-700\">Backtest Progress</span>\r\n                  <span className=\"text-sm font-medium text-blue-600\">{Math.floor(progress)}%</span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-3\">\r\n                  <div \r\n                    className=\"bg-blue-600 h-3 rounded-full transition-all duration-300\"\r\n                    style={{ width: `${progress}%` }}\r\n                  ></div>\r\n                </div>\r\n                <p className=\"text-sm text-gray-500 mt-2\">\r\n                  Simulating trades across {config.symbols.length} pairs...\r\n                </p>\r\n              </Card>\r\n            )}\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"names":["BacktestPage","navigate","useNavigate","config","setConfig","useState","strategy","setStrategy","advancedConfig","setAdvancedConfig","showAdvanced","setShowAdvanced","isRunning","setIsRunning","progress","setProgress","error","setError","results","setResults","showCreateBot","setShowCreateBot","botName","setBotName","handleStrategyChange","field","value","prev","handleCreateBotFromResults","popularSymbols","handleStartBacktest","symbols","pair","backtestData","progressInterval","err","jsxs","jsx","Header","Card","e","symbol","newSymbols","s","data","Button","_a","_b"],"mappings":"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"}