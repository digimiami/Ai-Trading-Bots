{"version":3,"file":"page-DqWORiYx.js","sources":["../../src/hooks/useBotExecutor.ts","../../src/pages/bots/page.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { API_ENDPOINTS, apiCall } from '../lib/supabase';\r\n\r\nexport interface TimeSyncData {\r\n  time: string;\r\n  offset: number;\r\n}\r\n\r\nexport interface MarketData {\r\n  symbol: string;\r\n  exchange: string;\r\n  price: number;\r\n  rsi: number;\r\n  adx: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport function useBotExecutor() {\r\n  const [isExecuting, setIsExecuting] = useState(false);\r\n  const [lastExecution, setLastExecution] = useState<string | null>(null);\r\n  const [timeSync, setTimeSync] = useState<TimeSyncData | null>(null);\r\n  const [marketData, setMarketData] = useState<MarketData | null>(null);\r\n\r\n  // Time synchronization\r\n  const syncTime = async () => {\r\n    try {\r\n      const response = await apiCall(`${API_ENDPOINTS.BOT_EXECUTOR}?action=time`);\r\n      setTimeSync(response);\r\n      console.log('Time synced:', response);\r\n    } catch (error) {\r\n      console.error('Time sync failed:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch market data\r\n  const fetchMarketData = async (symbol: string = 'BTCUSDT', exchange: string = 'bybit') => {\r\n    try {\r\n      const response = await apiCall(`${API_ENDPOINTS.BOT_EXECUTOR}?action=market-data&symbol=${symbol}&exchange=${exchange}`);\r\n      setMarketData(response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Market data fetch failed:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Execute single bot\r\n  const executeBot = async (botId: string) => {\r\n    try {\r\n      setIsExecuting(true);\r\n      const response = await apiCall(API_ENDPOINTS.BOT_EXECUTOR, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          action: 'execute_bot',\r\n          botId\r\n        })\r\n      });\r\n      \r\n      setLastExecution(new Date().toISOString());\r\n      console.log('Bot executed:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Bot execution failed:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsExecuting(false);\r\n    }\r\n  };\r\n\r\n  // Execute all running bots\r\n  const executeAllBots = async () => {\r\n    try {\r\n      setIsExecuting(true);\r\n      const response = await apiCall(API_ENDPOINTS.BOT_EXECUTOR, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          action: 'execute_all_bots'\r\n        })\r\n      });\r\n      \r\n      setLastExecution(new Date().toISOString());\r\n      console.log('All bots executed:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('All bots execution failed:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsExecuting(false);\r\n    }\r\n  };\r\n\r\n  // Auto-execution setup\r\n  useEffect(() => {\r\n    // Initial time sync\r\n    syncTime();\r\n    \r\n    // Set up periodic execution every 5 minutes\r\n    const executionInterval = setInterval(() => {\r\n      executeAllBots().catch(console.error);\r\n    }, 300000); // 5 minutes\r\n\r\n    // Set up periodic time sync every 5 minutes\r\n    const timeSyncInterval = setInterval(() => {\r\n      syncTime();\r\n    }, 300000); // 5 minutes\r\n\r\n    return () => {\r\n      clearInterval(executionInterval);\r\n      clearInterval(timeSyncInterval);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    isExecuting,\r\n    lastExecution,\r\n    timeSync,\r\n    marketData,\r\n    syncTime,\r\n    fetchMarketData,\r\n    executeBot,\r\n    executeAllBots\r\n  };\r\n}\r\n","\nimport { useState } from 'react';\nimport { Header } from '../../components/feature/Header';\nimport Navigation from '../../components/feature/Navigation';\nimport Button from '../../components/base/Button';\nimport Card from '../../components/base/Card';\nimport { TradingBot } from '../../types/trading';\nimport { useNavigate } from 'react-router-dom';\nimport { useBots } from '../../hooks/useBots';\nimport { useBotActivity } from '../../hooks/useBotActivity';\nimport { useBotExecutor } from '../../hooks/useBotExecutor';\n\nexport default function BotsPage() {\n  const navigate = useNavigate();\n  const { bots, loading, startBot, stopBot, updateBot, deleteBot } = useBots();\n  const { activities, addLog } = useBotActivity(bots);\n  const { isExecuting, lastExecution, timeSync, executeBot, executeAllBots } = useBotExecutor();\n  const [filter, setFilter] = useState<'all' | 'running' | 'paused' | 'stopped'>('all');\n  const [bulkLoading, setBulkLoading] = useState(false);\n  const [expandedBot, setExpandedBot] = useState<string | null>(null);\n\n  const filteredBots = bots.filter(bot => \n    filter === 'all' || bot.status === filter\n  );\n\n  const getBotActivity = (botId: string) => {\n    return activities.find(activity => activity.botId === botId);\n  };\n\n  const getLogLevelColor = (level: string) => {\n    switch (level) {\n      case 'info': return 'text-blue-600 bg-blue-50';\n      case 'warning': return 'text-yellow-600 bg-yellow-50';\n      case 'error': return 'text-red-600 bg-red-50';\n      case 'success': return 'text-green-600 bg-green-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'market': return 'ri-line-chart-line';\n      case 'trade': return 'ri-exchange-line';\n      case 'strategy': return 'ri-brain-line';\n      case 'system': return 'ri-settings-line';\n      case 'error': return 'ri-error-warning-line';\n      default: return 'ri-information-line';\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running': return 'bg-green-100 text-green-800';\n      case 'paused': return 'bg-yellow-100 text-yellow-800';\n      case 'stopped': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'text-green-600';\n      case 'medium': return 'text-yellow-600';\n      case 'high': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const handleBotAction = async (botId: string, action: 'start' | 'pause' | 'stop') => {\n    try {\n      if (action === 'start') {\n        await startBot(botId);\n        await addLog(botId, {\n          level: 'success',\n          category: 'system',\n          message: 'Bot started successfully',\n          details: { action: 'start', timestamp: new Date().toISOString() }\n        });\n      } else if (action === 'stop') {\n        await stopBot(botId);\n        await addLog(botId, {\n          level: 'info',\n          category: 'system',\n          message: 'Bot stopped by user',\n          details: { action: 'stop', timestamp: new Date().toISOString() }\n        });\n      } else if (action === 'pause') {\n        await updateBot(botId, { status: 'paused' });\n        await addLog(botId, {\n          level: 'warning',\n          category: 'system',\n          message: 'Bot paused by user',\n          details: { action: 'pause', timestamp: new Date().toISOString() }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to update bot:', error);\n      await addLog(botId, {\n        level: 'error',\n        category: 'error',\n        message: `Failed to ${action} bot: ${error}`,\n        details: { action, error: error instanceof Error ? error.message : String(error) }\n      });\n    }\n  };\n\n  const handleStartAll = async () => {\n    setBulkLoading(true);\n    try {\n      const stoppedBots = filteredBots.filter(bot => bot.status === 'stopped' || bot.status === 'paused');\n      await Promise.all(stoppedBots.map(bot => startBot(bot.id)));\n    } catch (error) {\n      console.error('Failed to start all bots:', error);\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleDeleteAll = async () => {\n    if (!confirm('Are you sure you want to delete all bots? This action cannot be undone.')) {\n      return;\n    }\n    setBulkLoading(true);\n    try {\n      await Promise.all(filteredBots.map(bot => deleteBot(bot.id)));\n    } catch (error) {\n      console.error('Failed to delete all bots:', error);\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header \n        title=\"Trading Bots\"\n        action={\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"warning\"\n              size=\"sm\"\n              onClick={executeAllBots}\n              disabled={isExecuting || filteredBots.filter(bot => bot.status === 'running').length === 0}\n            >\n              <i className=\"ri-play-circle-line mr-1\"></i>\n              Execute All\n            </Button>\n            <Button\n              variant=\"success\"\n              size=\"sm\"\n              onClick={handleStartAll}\n              disabled={bulkLoading || filteredBots.filter(bot => bot.status === 'stopped' || bot.status === 'paused').length === 0}\n            >\n              <i className=\"ri-play-line mr-1\"></i>\n              Start All\n            </Button>\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={handleDeleteAll}\n              disabled={bulkLoading || filteredBots.length === 0}\n            >\n              <i className=\"ri-delete-bin-line mr-1\"></i>\n              Delete All\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={() => navigate('/create-bot')}\n            >\n              <i className=\"ri-add-line mr-1\"></i>\n              New Bot\n            </Button>\n          </div>\n        }\n      />\n      \n      <div className=\"pt-20 pb-20 px-4\">\n        <div className=\"max-w-6xl mx-auto space-y-4\">\n          {/* Execution Status */}\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className={`w-3 h-3 rounded-full ${isExecuting ? 'bg-yellow-500 animate-pulse' : 'bg-green-500'}`}></div>\n                  <span className=\"text-sm text-gray-600\">\n                    {isExecuting ? 'Executing...' : 'Ready'}\n                  </span>\n                </div>\n                {lastExecution && (\n                  <div className=\"text-xs text-gray-500\">\n                    Last execution: {new Date(lastExecution).toLocaleTimeString()}\n                  </div>\n                )}\n                {timeSync && (\n                  <div className=\"text-xs text-gray-500\">\n                    Time sync: {timeSync.offset > 0 ? '+' : ''}{timeSync.offset}ms\n                  </div>\n                )}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Auto-execution every 5 minutes\n              </div>\n            </div>\n          </Card>\n\n          {/* Filter Tabs */}\n          <div className=\"flex space-x-2 overflow-x-auto\">\n            {['all', 'running', 'paused', 'stopped'].map((status) => (\n              <button\n                key={status}\n                onClick={() => setFilter(status as any)}\n                className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${\n                  filter === status\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-white text-gray-600 border border-gray-200'\n                }`}\n              >\n                {status.charAt(0).toUpperCase() + status.slice(1)}\n              </button>\n            ))}\n          </div>\n\n          {/* Bot List */}\n          <div className=\"space-y-4\">\n            {loading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                <p className=\"text-gray-600\">Loading bots...</p>\n              </div>\n            ) : filteredBots.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <i className=\"ri-robot-line text-4xl text-gray-400 mb-4\"></i>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No bots found</h3>\n                <p className=\"text-gray-500 mb-4\">Create your first trading bot to get started</p>\n                <Button onClick={() => navigate('/create-bot')}>\n                  <i className=\"ri-add-line mr-2\"></i>\n                  Create Bot\n                </Button>\n              </div>\n            ) : (\n              filteredBots.map((bot) => (\n              <Card key={bot.id} className=\"space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <i className={`${bot.exchange === 'bybit' ? 'ri-currency-line' : 'ri-exchange-line'} text-blue-600 text-xl`}></i>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{bot.name}</h3>\n                      <p className=\"text-sm text-gray-500\">{bot.symbol} • {bot.exchange.toUpperCase()}</p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(bot.status)}`}>\n                          {bot.status}\n                        </span>\n                        <span className={`text-xs font-medium ${getRiskColor(bot.riskLevel)}`}>\n                          {bot.riskLevel} risk\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className={`text-lg font-bold ${bot.pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {bot.pnl >= 0 ? '+' : ''}${bot.pnl.toFixed(2)}\n                    </p>\n                    <p className={`text-sm ${bot.pnlPercentage >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {bot.pnlPercentage >= 0 ? '+' : ''}{bot.pnlPercentage.toFixed(2)}%\n                    </p>\n                  </div>\n                </div>\n\n                {/* Bot Stats */}\n                <div className=\"grid grid-cols-3 gap-4 pt-4 border-t border-gray-100\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">Trades</p>\n                    <p className=\"font-semibold text-gray-900\">{bot.totalTrades}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">Win Rate</p>\n                    <p className=\"font-semibold text-gray-900\">{bot.winRate}%</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">Leverage</p>\n                    <p className=\"font-semibold text-gray-900\">{bot.leverage}x</p>\n                  </div>\n                </div>\n\n                {/* Bot Activity Logs */}\n                {(() => {\n                  const activity = getBotActivity(bot.id);\n                  const recentLogs = activity?.logs.slice(0, 3) || [];\n                  \n                  return (\n                    <div className=\"pt-4 border-t border-gray-100\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"text-sm font-medium text-gray-700\">Recent Activity</h4>\n                        <button\n                          onClick={() => setExpandedBot(expandedBot === bot.id ? null : bot.id)}\n                          className=\"text-xs text-blue-600 hover:text-blue-800\"\n                        >\n                          {expandedBot === bot.id ? 'Hide' : 'Show All'}\n                        </button>\n                      </div>\n                      \n                      {/* Activity Stats */}\n                      {activity && (\n                        <div className=\"flex space-x-4 mb-3 text-xs\">\n                          <span className=\"text-green-600\">✓ {activity.successCount}</span>\n                          <span className=\"text-yellow-600\">⚠ {activity.logs.filter(l => l.level === 'warning').length}</span>\n                          <span className=\"text-red-600\">✗ {activity.errorCount}</span>\n                          <span className=\"text-gray-500\">📊 {activity.logs.length} total</span>\n                        </div>\n                      )}\n\n                      {/* Recent Logs */}\n                      <div className=\"space-y-2\">\n                        {recentLogs.length === 0 ? (\n                          <div className=\"text-center py-4 text-gray-500 text-sm\">\n                            <i className=\"ri-file-list-line text-lg mb-1\"></i>\n                            <p>No activity logs yet</p>\n                          </div>\n                        ) : (\n                          recentLogs.map((log) => (\n                            <div key={log.id} className=\"flex items-start space-x-2 p-2 bg-gray-50 rounded text-xs\">\n                              <div className={`w-5 h-5 rounded-full flex items-center justify-center ${getLogLevelColor(log.level)}`}>\n                                <i className={`${getCategoryIcon(log.category)} text-xs`}></i>\n                              </div>\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span className={`px-1 py-0.5 rounded text-xs font-medium ${getLogLevelColor(log.level)}`}>\n                                    {log.level}\n                                  </span>\n                                  <span className=\"text-gray-500\">{formatTime(log.timestamp)}</span>\n                                </div>\n                                <p className=\"text-gray-700 mt-1 truncate\">{log.message}</p>\n                              </div>\n                            </div>\n                          ))\n                        )}\n                      </div>\n\n                      {/* Expanded Logs */}\n                      {expandedBot === bot.id && activity && activity.logs.length > 3 && (\n                        <div className=\"mt-3 space-y-2 max-h-48 overflow-y-auto\">\n                          {activity.logs.slice(3).map((log) => (\n                            <div key={log.id} className=\"flex items-start space-x-2 p-2 bg-gray-50 rounded text-xs\">\n                              <div className={`w-5 h-5 rounded-full flex items-center justify-center ${getLogLevelColor(log.level)}`}>\n                                <i className={`${getCategoryIcon(log.category)} text-xs`}></i>\n                              </div>\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span className={`px-1 py-0.5 rounded text-xs font-medium ${getLogLevelColor(log.level)}`}>\n                                    {log.level}\n                                  </span>\n                                  <span className=\"text-gray-500\">{formatTime(log.timestamp)}</span>\n                                </div>\n                                <p className=\"text-gray-700 mt-1\">{log.message}</p>\n                                {log.details && (\n                                  <details className=\"mt-1\">\n                                    <summary className=\"cursor-pointer text-gray-500 hover:text-gray-700\">Details</summary>\n                                    <pre className=\"mt-1 p-1 bg-white rounded border text-xs overflow-x-auto\">\n                                      {JSON.stringify(log.details, null, 2)}\n                                    </pre>\n                                  </details>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })()}\n\n                {/* Bot Actions */}\n                <div className=\"flex space-x-2 pt-4 border-t border-gray-100\">\n                  {bot.status === 'running' ? (\n                    <>\n                      <Button \n                        variant=\"warning\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => executeBot(bot.id)}\n                        disabled={isExecuting}\n                      >\n                        <i className=\"ri-play-circle-line mr-1\"></i>\n                        Execute\n                      </Button>\n                      <Button \n                        variant=\"secondary\" \n                        size=\"sm\" \n                        onClick={() => handleBotAction(bot.id, 'pause')}\n                      >\n                        <i className=\"ri-pause-line mr-1\"></i>\n                        Pause\n                      </Button>\n                    </>\n                  ) : (\n                    <Button \n                      variant=\"success\" \n                      size=\"sm\" \n                      className=\"flex-1\"\n                      onClick={() => handleBotAction(bot.id, 'start')}\n                    >\n                      <i className=\"ri-play-line mr-1\"></i>\n                      Start\n                    </Button>\n                  )}\n                  <Button \n                    variant=\"danger\" \n                    size=\"sm\"\n                    onClick={() => handleBotAction(bot.id, 'stop')}\n                  >\n                    <i className=\"ri-stop-line\"></i>\n                  </Button>\n                  <Button \n                    variant=\"secondary\" \n                    size=\"sm\"\n                    onClick={() => navigate('/bot-activity')}\n                  >\n                    <i className=\"ri-file-list-line\"></i>\n                  </Button>\n                </div>\n              </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n      <Navigation />\n    </div>\n  );\n}\n"],"names":["useBotExecutor","isExecuting","setIsExecuting","useState","lastExecution","setLastExecution","timeSync","setTimeSync","marketData","setMarketData","syncTime","response","apiCall","API_ENDPOINTS","error","fetchMarketData","symbol","exchange","executeBot","botId","executeAllBots","useEffect","executionInterval","timeSyncInterval","BotsPage","navigate","useNavigate","bots","loading","startBot","stopBot","updateBot","deleteBot","useBots","activities","addLog","useBotActivity","filter","setFilter","bulkLoading","setBulkLoading","expandedBot","setExpandedBot","filteredBots","bot","getBotActivity","activity","getLogLevelColor","level","getCategoryIcon","category","formatTime","timestamp","getStatusColor","status","getRiskColor","risk","handleBotAction","action","handleStartAll","stoppedBots","handleDeleteAll","jsxs","jsx","Header","Button","Card","recentLogs","l","log","Fragment","Navigation"],"mappings":"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"}