{"version":3,"file":"page-BboATMRb.js","sources":["../../src/pages/create-bot/page.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from '../../components/base/Button';\nimport Card from '../../components/base/Card';\nimport Header from '../../components/feature/Header';\nimport { TradingStrategy } from '../../types/trading';\nimport { useBots } from '../../hooks/useBots';\n\nexport default function CreateBotPage() {\n  const navigate = useNavigate();\n  const { createBot } = useBots();\n  const [formData, setFormData] = useState({\n    name: '',\n    exchange: 'bybit' as 'bybit' | 'okx',\n    symbol: 'BTCUSDT',\n    leverage: 5,\n    balance: 1000,\n    riskLevel: 'medium' as 'low' | 'medium' | 'high'\n  });\n\n  const [strategy, setStrategy] = useState<TradingStrategy>({\n    rsiThreshold: 70,\n    adxThreshold: 25,\n    bbWidthThreshold: 0.02,\n    emaSlope: 0.5,\n    atrPercentage: 2.5,\n    vwapDistance: 1.2,\n    momentumThreshold: 0.8,\n    useMLPrediction: true,\n    minSamplesForML: 100\n  });\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  const popularSymbols = [\n    'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT', 'AVAXUSDT',\n    'BNBUSDT', 'XRPUSDT', 'MATICUSDT', 'LINKUSDT', 'UNIUSDT', 'LTCUSDT'\n  ];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsCreating(true);\n    \n    try {\n      const botData = {\n        name: formData.name,\n        strategy: 'advanced_ml',\n        exchange: formData.exchange,\n        symbol: formData.symbol,\n        config: {\n          leverage: formData.leverage,\n          balance: formData.balance,\n          riskLevel: formData.riskLevel,\n          ...strategy\n        },\n        performance: {\n          pnl: 0,\n          totalTrades: 0,\n          winRate: 0\n        }\n      };\n      \n      await createBot(botData);\n      navigate('/', { state: { message: `Bot \"${formData.name}\" created successfully!` } });\n    } catch (error) {\n      console.error('Failed to create bot:', error);\n      alert('Failed to create bot. Please try again.');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleStrategyChange = (field: keyof TradingStrategy, value: any) => {\n    setStrategy(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"pt-16 pb-6 px-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"flex items-center mb-6\">\n            <button\n              onClick={() => navigate('/')}\n              className=\"mr-3 p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <i className=\"ri-arrow-left-line text-xl\"></i>\n            </button>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Create New Bot</h1>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Basic Configuration */}\n            <Card className=\"p-6\">\n              <h2 className=\"text-lg font-semibold mb-4 text-gray-900\">Basic Configuration</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Bot Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    placeholder=\"Enter bot name\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Exchange\n                  </label>\n                  <select\n                    value={formData.exchange}\n                    onChange={(e) => handleInputChange('exchange', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"bybit\">Bybit</option>\n                    <option value=\"okx\">OKX</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Trading Pair\n                  </label>\n                  <select\n                    value={formData.symbol}\n                    onChange={(e) => handleInputChange('symbol', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    {popularSymbols.map(symbol => (\n                      <option key={symbol} value={symbol}>{symbol}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Leverage\n                  </label>\n                  <select\n                    value={formData.leverage}\n                    onChange={(e) => handleInputChange('leverage', parseInt(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value={1}>1x</option>\n                    <option value={2}>2x</option>\n                    <option value={3}>3x</option>\n                    <option value={5}>5x</option>\n                    <option value={10}>10x</option>\n                    <option value={20}>20x</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Initial Balance (USDT)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.balance}\n                    onChange={(e) => handleInputChange('balance', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"100\"\n                    step=\"100\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Risk Level\n                  </label>\n                  <select\n                    value={formData.riskLevel}\n                    onChange={(e) => handleInputChange('riskLevel', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"low\">Low Risk</option>\n                    <option value=\"medium\">Medium Risk</option>\n                    <option value=\"high\">High Risk</option>\n                  </select>\n                </div>\n              </div>\n            </Card>\n\n            {/* Strategy Configuration */}\n            <Card className=\"p-6\">\n              <h2 className=\"text-lg font-semibold mb-4 text-gray-900\">Strategy Parameters</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    RSI Threshold\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.rsiThreshold}\n                    onChange={(e) => handleStrategyChange('rsiThreshold', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"30\"\n                    max=\"90\"\n                    step=\"5\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    ADX Threshold\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.adxThreshold}\n                    onChange={(e) => handleStrategyChange('adxThreshold', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"10\"\n                    max=\"50\"\n                    step=\"5\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    BB Width Threshold\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.bbWidthThreshold}\n                    onChange={(e) => handleStrategyChange('bbWidthThreshold', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"0.01\"\n                    max=\"0.1\"\n                    step=\"0.005\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    EMA Slope\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.emaSlope}\n                    onChange={(e) => handleStrategyChange('emaSlope', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"0.1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    ATR Percentage\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.atrPercentage}\n                    onChange={(e) => handleStrategyChange('atrPercentage', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"1\"\n                    max=\"10\"\n                    step=\"0.5\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    VWAP Distance\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.vwapDistance}\n                    onChange={(e) => handleStrategyChange('vwapDistance', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"0.5\"\n                    max=\"3\"\n                    step=\"0.1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Momentum Threshold\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.momentumThreshold}\n                    onChange={(e) => handleStrategyChange('momentumThreshold', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"0.1\"\n                    max=\"2\"\n                    step=\"0.1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Min Samples for ML\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={strategy.minSamplesForML}\n                    onChange={(e) => handleStrategyChange('minSamplesForML', parseInt(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"50\"\n                    max=\"500\"\n                    step=\"25\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={strategy.useMLPrediction}\n                    onChange={(e) => handleStrategyChange('useMLPrediction', e.target.checked)}\n                    className=\"mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                  />\n                  <span className=\"text-sm font-medium text-gray-700\">\n                    Enable ML Prediction (fallback to rules until min samples)\n                  </span>\n                </label>\n              </div>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4\">\n              <Button\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => navigate('/')}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n                loading={isCreating}\n                className=\"flex-1\"\n              >\n                {isCreating ? 'Creating Bot...' : 'Create Bot'}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":["CreateBotPage","navigate","useNavigate","createBot","useBots","formData","setFormData","useState","strategy","setStrategy","isCreating","setIsCreating","popularSymbols","handleSubmit","e","botData","error","handleInputChange","field","value","prev","handleStrategyChange","jsxs","jsx","Header","Card","symbol","Button"],"mappings":"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"}