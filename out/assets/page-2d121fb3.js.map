{"version":3,"file":"page-2d121fb3.js","sources":["../../src/pages/bots/page.tsx"],"sourcesContent":["\nimport { useState } from 'react';\nimport { Header } from '../../components/feature/Header';\nimport Navigation from '../../components/feature/Navigation';\nimport Button from '../../components/base/Button';\nimport Card from '../../components/base/Card';\nimport { TradingBot } from '../../types/trading';\nimport { useNavigate } from 'react-router-dom';\nimport { useBots } from '../../hooks/useBots';\nimport { useBotActivity } from '../../hooks/useBotActivity';\nimport { useBotExecutor } from '../../hooks/useBotExecutor';\n\nexport default function BotsPage() {\n  const navigate = useNavigate();\n  const { bots, loading, startBot, stopBot, updateBot, deleteBot } = useBots();\n  const { activities, addLog } = useBotActivity(bots);\n  const { isExecuting, lastExecution, timeSync, executeBot, executeAllBots } = useBotExecutor();\n  const [filter, setFilter] = useState<'all' | 'running' | 'paused' | 'stopped'>('all');\n  const [bulkLoading, setBulkLoading] = useState(false);\n  const [expandedBot, setExpandedBot] = useState<string | null>(null);\n\n  const filteredBots = bots.filter(bot => \n    filter === 'all' || bot.status === filter\n  );\n\n  const getBotActivity = (botId: string) => {\n    return activities.find(activity => activity.botId === botId);\n  };\n\n  const getLogLevelColor = (level: string) => {\n    switch (level) {\n      case 'info': return 'text-blue-600 bg-blue-50';\n      case 'warning': return 'text-yellow-600 bg-yellow-50';\n      case 'error': return 'text-red-600 bg-red-50';\n      case 'success': return 'text-green-600 bg-green-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'market': return 'ri-line-chart-line';\n      case 'trade': return 'ri-exchange-line';\n      case 'strategy': return 'ri-brain-line';\n      case 'system': return 'ri-settings-line';\n      case 'error': return 'ri-error-warning-line';\n      default: return 'ri-information-line';\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running': return 'bg-green-100 text-green-800';\n      case 'paused': return 'bg-yellow-100 text-yellow-800';\n      case 'stopped': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'text-green-600';\n      case 'medium': return 'text-yellow-600';\n      case 'high': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const handleBotAction = async (botId: string, action: 'start' | 'pause' | 'stop') => {\n    try {\n      if (action === 'start') {\n        await startBot(botId);\n        await addLog(botId, {\n          level: 'success',\n          category: 'system',\n          message: 'Bot started successfully',\n          details: { action: 'start', timestamp: new Date().toISOString() }\n        });\n      } else if (action === 'stop') {\n        await stopBot(botId);\n        await addLog(botId, {\n          level: 'info',\n          category: 'system',\n          message: 'Bot stopped by user',\n          details: { action: 'stop', timestamp: new Date().toISOString() }\n        });\n      } else if (action === 'pause') {\n        await updateBot(botId, { status: 'paused' });\n        await addLog(botId, {\n          level: 'warning',\n          category: 'system',\n          message: 'Bot paused by user',\n          details: { action: 'pause', timestamp: new Date().toISOString() }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to update bot:', error);\n      await addLog(botId, {\n        level: 'error',\n        category: 'error',\n        message: `Failed to ${action} bot: ${error}`,\n        details: { action, error: error instanceof Error ? error.message : String(error) }\n      });\n    }\n  };\n\n  const handleStartAll = async () => {\n    setBulkLoading(true);\n    try {\n      const stoppedBots = filteredBots.filter(bot => bot.status === 'stopped' || bot.status === 'paused');\n      await Promise.all(stoppedBots.map(bot => startBot(bot.id)));\n    } catch (error) {\n      console.error('Failed to start all bots:', error);\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleStopAll = async () => {\n    setBulkLoading(true);\n    try {\n      const runningBots = filteredBots.filter(bot => bot.status === 'running' || bot.status === 'paused');\n      await Promise.all(runningBots.map(bot => stopBot(bot.id)));\n    } catch (error) {\n      console.error('Failed to stop all bots:', error);\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleResetAll = async () => {\n    if (!confirm('Are you sure you want to reset all bot statistics? This will set PnL, trades count, and win rate to zero.')) {\n      return;\n    }\n    setBulkLoading(true);\n    try {\n      await Promise.all(filteredBots.map(bot =>\n        updateBot(bot.id, {\n          total_trades: 0,\n          win_rate: 0,\n          pnl: 0,\n          pnl_percentage: 0,\n          last_trade_at: null\n        })\n      ));\n      console.log('All bot statistics reset successfully');\n    } catch (error) {\n      console.error('Failed to reset all bots:', error);\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleDeleteAll = async () => {\n    if (!confirm('Are you sure you want to delete all bots? This action cannot be undone.')) {\n      return;\n    }\n    setBulkLoading(true);\n    try {\n      await Promise.all(filteredBots.map(bot => deleteBot(bot.id)));\n      console.log('All bots deleted successfully');\n    } catch (error) {\n      console.error('Failed to delete all bots:', error);\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  // Individual bot actions\n  const handleResetBot = async (botId: string, botName: string) => {\n    if (!confirm(`Are you sure you want to reset \"${botName}\" statistics? This will set PnL, trades count, and win rate to zero.`)) {\n      return;\n    }\n    try {\n      await updateBot(botId, {\n        total_trades: 0,\n        win_rate: 0,\n        pnl: 0,\n        pnl_percentage: 0,\n        last_trade_at: null\n      });\n      console.log(`Bot \"${botName}\" statistics reset successfully`);\n    } catch (error) {\n      console.error(`Failed to reset bot \"${botName}\":`, error);\n    }\n  };\n\n  const handleDeleteBot = async (botId: string, botName: string) => {\n    if (!confirm(`Are you sure you want to delete \"${botName}\"? This action cannot be undone.`)) {\n      return;\n    }\n    try {\n      await deleteBot(botId);\n      console.log(`Bot \"${botName}\" deleted successfully`);\n    } catch (error) {\n      console.error(`Failed to delete bot \"${botName}\":`, error);\n    }\n  };\n\n  const handleEditBot = (botId: string) => {\n    navigate(`/edit-bot/${botId}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header \n        title=\"Trading Bots\"\n        action={\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"warning\"\n              size=\"sm\"\n              onClick={executeAllBots}\n              disabled={isExecuting || filteredBots.filter(bot => bot.status === 'running').length === 0}\n            >\n              <i className=\"ri-play-circle-line mr-1\"></i>\n              Execute All\n            </Button>\n            <Button\n              variant=\"success\"\n              size=\"sm\"\n              onClick={handleStartAll}\n              disabled={bulkLoading || filteredBots.filter(bot => bot.status === 'stopped' || bot.status === 'paused').length === 0}\n            >\n              <i className=\"ri-play-line mr-1\"></i>\n              Start All\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={handleStopAll}\n              disabled={bulkLoading || filteredBots.filter(bot => bot.status === 'running' || bot.status === 'paused').length === 0}\n            >\n              <i className=\"ri-stop-line mr-1\"></i>\n              Stop All\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={handleResetAll}\n              disabled={bulkLoading || filteredBots.length === 0}\n            >\n              <i className=\"ri-refresh-line mr-1\"></i>\n              Reset All\n            </Button>\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={handleDeleteAll}\n              disabled={bulkLoading || filteredBots.length === 0}\n            >\n              <i className=\"ri-delete-bin-line mr-1\"></i>\n              Delete All\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={() => navigate('/create-bot')}\n            >\n              <i className=\"ri-add-line mr-1\"></i>\n              New Bot\n            </Button>\n          </div>\n        }\n      />\n      \n      <div className=\"pt-20 pb-20 px-4\">\n        <div className=\"max-w-6xl mx-auto space-y-4\">\n          {/* Execution Status */}\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className={`w-3 h-3 rounded-full ${isExecuting ? 'bg-yellow-500 animate-pulse' : 'bg-green-500'}`}></div>\n                  <span className=\"text-sm text-gray-600\">\n                    {isExecuting ? 'Executing...' : 'Ready'}\n                  </span>\n                </div>\n                {lastExecution && (\n                  <div className=\"text-xs text-gray-500\">\n                    Last execution: {new Date(lastExecution).toLocaleTimeString()}\n                  </div>\n                )}\n                {timeSync && (\n                  <div className=\"text-xs text-gray-500\">\n                    Time sync: {timeSync.offset > 0 ? '+' : ''}{timeSync.offset}ms\n                  </div>\n                )}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Auto-execution every 5 minutes\n              </div>\n            </div>\n          </Card>\n\n          {/* Filter Tabs */}\n          <div className=\"flex space-x-2 overflow-x-auto\">\n            {['all', 'running', 'paused', 'stopped'].map((status) => (\n              <button\n                key={status}\n                onClick={() => setFilter(status as any)}\n                className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${\n                  filter === status\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-white text-gray-600 border border-gray-200'\n                }`}\n              >\n                {status.charAt(0).toUpperCase() + status.slice(1)}\n              </button>\n            ))}\n          </div>\n\n          {/* Bot List */}\n          <div className=\"space-y-4\">\n            {loading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                <p className=\"text-gray-600\">Loading bots...</p>\n              </div>\n            ) : filteredBots.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <i className=\"ri-robot-line text-4xl text-gray-400 mb-4\"></i>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No bots found</h3>\n                <p className=\"text-gray-500 mb-4\">Create your first trading bot to get started</p>\n                <Button onClick={() => navigate('/create-bot')}>\n                  <i className=\"ri-add-line mr-2\"></i>\n                  Create Bot\n                </Button>\n              </div>\n            ) : (\n              filteredBots.map((bot) => (\n              <Card key={bot.id} className=\"space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <i className={`${bot.exchange === 'bybit' ? 'ri-currency-line' : 'ri-exchange-line'} text-blue-600 text-xl`}></i>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{bot.name}</h3>\n                      <p className=\"text-sm text-gray-500\">{bot.symbol} • {bot.exchange.toUpperCase()}</p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(bot.status)}`}>\n                          {bot.status}\n                        </span>\n                        <span className={`text-xs font-medium ${getRiskColor(bot.riskLevel)}`}>\n                          {bot.riskLevel} risk\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className={`text-lg font-bold ${bot.pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {bot.pnl >= 0 ? '+' : ''}${bot.pnl.toFixed(2)}\n                    </p>\n                    <p className={`text-sm ${bot.pnlPercentage >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {bot.pnlPercentage >= 0 ? '+' : ''}{bot.pnlPercentage.toFixed(2)}%\n                    </p>\n                  </div>\n                </div>\n\n                {/* Bot Stats */}\n                <div className=\"grid grid-cols-3 gap-4 pt-4 border-t border-gray-100\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">Trades</p>\n                    <p className=\"font-semibold text-gray-900\">{bot.totalTrades}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">Win Rate</p>\n                    <p className=\"font-semibold text-gray-900\">{bot.winRate}%</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">Leverage</p>\n                    <p className=\"font-semibold text-gray-900\">{bot.leverage}x</p>\n                  </div>\n                </div>\n\n                {/* Bot Activity Logs */}\n                {(() => {\n                  const activity = getBotActivity(bot.id);\n                  const recentLogs = activity?.logs.slice(0, 3) || [];\n                  \n                  return (\n                    <div className=\"pt-4 border-t border-gray-100\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"text-sm font-medium text-gray-700\">Recent Activity</h4>\n                        <button\n                          onClick={() => setExpandedBot(expandedBot === bot.id ? null : bot.id)}\n                          className=\"text-xs text-blue-600 hover:text-blue-800\"\n                        >\n                          {expandedBot === bot.id ? 'Hide' : 'Show All'}\n                        </button>\n                      </div>\n                      \n                      {/* Activity Stats */}\n                      {activity && (\n                        <div className=\"flex space-x-4 mb-3 text-xs\">\n                          <span className=\"text-green-600\">✓ {activity.successCount}</span>\n                          <span className=\"text-yellow-600\">⚠ {activity.logs.filter(l => l.level === 'warning').length}</span>\n                          <span className=\"text-red-600\">✗ {activity.errorCount}</span>\n                          <span className=\"text-gray-500\">📊 {activity.logs.length} total</span>\n                        </div>\n                      )}\n\n                      {/* Recent Logs */}\n                      <div className=\"space-y-2\">\n                        {recentLogs.length === 0 ? (\n                          <div className=\"text-center py-4 text-gray-500 text-sm\">\n                            <i className=\"ri-file-list-line text-lg mb-1\"></i>\n                            <p>No activity logs yet</p>\n                          </div>\n                        ) : (\n                          recentLogs.map((log) => (\n                            <div key={log.id} className=\"flex items-start space-x-2 p-2 bg-gray-50 rounded text-xs\">\n                              <div className={`w-5 h-5 rounded-full flex items-center justify-center ${getLogLevelColor(log.level)}`}>\n                                <i className={`${getCategoryIcon(log.category)} text-xs`}></i>\n                              </div>\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span className={`px-1 py-0.5 rounded text-xs font-medium ${getLogLevelColor(log.level)}`}>\n                                    {log.level}\n                                  </span>\n                                  <span className=\"text-gray-500\">{formatTime(log.timestamp)}</span>\n                                </div>\n                                <p className=\"text-gray-700 mt-1 truncate\">{log.message}</p>\n                              </div>\n                            </div>\n                          ))\n                        )}\n                      </div>\n\n                      {/* Expanded Logs */}\n                      {expandedBot === bot.id && activity && activity.logs.length > 3 && (\n                        <div className=\"mt-3 space-y-2 max-h-48 overflow-y-auto\">\n                          {activity.logs.slice(3).map((log) => (\n                            <div key={log.id} className=\"flex items-start space-x-2 p-2 bg-gray-50 rounded text-xs\">\n                              <div className={`w-5 h-5 rounded-full flex items-center justify-center ${getLogLevelColor(log.level)}`}>\n                                <i className={`${getCategoryIcon(log.category)} text-xs`}></i>\n                              </div>\n                              <div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span className={`px-1 py-0.5 rounded text-xs font-medium ${getLogLevelColor(log.level)}`}>\n                                    {log.level}\n                                  </span>\n                                  <span className=\"text-gray-500\">{formatTime(log.timestamp)}</span>\n                                </div>\n                                <p className=\"text-gray-700 mt-1\">{log.message}</p>\n                                {log.details && (\n                                  <details className=\"mt-1\">\n                                    <summary className=\"cursor-pointer text-gray-500 hover:text-gray-700\">Details</summary>\n                                    <pre className=\"mt-1 p-1 bg-white rounded border text-xs overflow-x-auto\">\n                                      {JSON.stringify(log.details, null, 2)}\n                                    </pre>\n                                  </details>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })()}\n\n                {/* Bot Actions */}\n                <div className=\"pt-4 border-t border-gray-100\">\n                  {/* Primary Actions Row */}\n                  <div className=\"flex space-x-2 mb-2\">\n                    {bot.status === 'running' ? (\n                      <>\n                        <Button \n                          variant=\"warning\" \n                          size=\"sm\" \n                          className=\"flex-1\"\n                          onClick={() => executeBot(bot.id)}\n                          disabled={isExecuting}\n                        >\n                          <i className=\"ri-play-circle-line mr-1\"></i>\n                          Execute\n                        </Button>\n                        <Button \n                          variant=\"secondary\" \n                          size=\"sm\" \n                          onClick={() => handleBotAction(bot.id, 'pause')}\n                        >\n                          <i className=\"ri-pause-line mr-1\"></i>\n                          Pause\n                        </Button>\n                      </>\n                    ) : (\n                      <Button \n                        variant=\"success\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => handleBotAction(bot.id, 'start')}\n                      >\n                        <i className=\"ri-play-line mr-1\"></i>\n                        Start\n                      </Button>\n                    )}\n                    <Button \n                      variant=\"danger\" \n                      size=\"sm\"\n                      onClick={() => handleBotAction(bot.id, 'stop')}\n                    >\n                      <i className=\"ri-stop-line\"></i>\n                    </Button>\n                    <Button \n                      variant=\"secondary\" \n                      size=\"sm\"\n                      onClick={() => navigate('/bot-activity')}\n                    >\n                      <i className=\"ri-file-list-line\"></i>\n                    </Button>\n                  </div>\n                  \n                  {/* Management Actions Row */}\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"primary\" \n                      size=\"sm\" \n                      className=\"flex-1\"\n                      onClick={() => handleEditBot(bot.id)}\n                    >\n                      <i className=\"ri-edit-line mr-1\"></i>\n                      Edit\n                    </Button>\n                    <Button \n                      variant=\"warning\" \n                      size=\"sm\" \n                      className=\"flex-1\"\n                      onClick={() => handleResetBot(bot.id, bot.name)}\n                    >\n                      <i className=\"ri-refresh-line mr-1\"></i>\n                      Reset\n                    </Button>\n                    <Button \n                      variant=\"danger\" \n                      size=\"sm\" \n                      className=\"flex-1\"\n                      onClick={() => handleDeleteBot(bot.id, bot.name)}\n                    >\n                      <i className=\"ri-delete-bin-line mr-1\"></i>\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n      <Navigation />\n    </div>\n  );\n}\n"],"names":["BotsPage","navigate","useNavigate","bots","loading","startBot","stopBot","updateBot","deleteBot","useBots","activities","addLog","useBotActivity","isExecuting","lastExecution","timeSync","executeBot","executeAllBots","useBotExecutor","filter","setFilter","useState","bulkLoading","setBulkLoading","expandedBot","setExpandedBot","filteredBots","bot","getBotActivity","botId","activity","getLogLevelColor","level","getCategoryIcon","category","formatTime","timestamp","getStatusColor","status","getRiskColor","risk","handleBotAction","action","error","handleStartAll","stoppedBots","handleStopAll","runningBots","handleResetAll","handleDeleteAll","handleResetBot","botName","handleDeleteBot","handleEditBot","jsxs","jsx","Header","Button","Card","recentLogs","l","log","Fragment","Navigation"],"mappings":"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"}