name: 🚀 Deploy to Supabase & VPS

on:
  push:
    branches: [master]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy-supabase:
    name: 📦 Deploy to Supabase
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: debug
        run: |
            cat -A .env
      
      - name: 🔗 Link to Supabase project
        run: |
            cat -A .env | head
            echo "Linking project without loading .env"
            supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} --debug
        
      
      - name: 🚀 Deploy Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "🚀 Deploying all Edge Functions..."
          
          # Deploy each function with error handling
          supabase functions deploy bot-executor --no-verify-jwt || echo "⚠️ bot-executor deployment failed"
          supabase functions deploy bot-management --no-verify-jwt || echo "⚠️ bot-management deployment failed"
          supabase functions deploy admin-management-enhanced --no-verify-jwt || echo "⚠️ admin-management-enhanced deployment failed"
          supabase functions deploy trading-engine --no-verify-jwt || echo "⚠️ trading-engine deployment failed"
          supabase functions deploy telegram-notifier --no-verify-jwt || echo "⚠️ telegram-notifier deployment failed"
          supabase functions deploy market-data --no-verify-jwt || echo "⚠️ market-data deployment failed"
          supabase functions deploy ml-predictions --no-verify-jwt || echo "⚠️ ml-predictions deployment failed"
          supabase functions deploy alerts-system --no-verify-jwt || echo "⚠️ alerts-system deployment failed"
          supabase functions deploy api-keys --no-verify-jwt || echo "⚠️ api-keys deployment failed"
          supabase functions deploy profile-management --no-verify-jwt || echo "⚠️ profile-management deployment failed"
          supabase functions deploy risk-management --no-verify-jwt || echo "⚠️ risk-management deployment failed"
          supabase functions deploy invitation-management --no-verify-jwt || echo "⚠️ invitation-management deployment failed"
          
          echo "✅ Edge functions deployment completed!"
      
      - name: 📋 Deploy Info
        run: |
          echo "📅 Date: $(date)"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📝 Commit: ${{ github.sha }}"

  deploy-vps:
    name: 🌐 Deploy to VPS
    runs-on: ubuntu-latest
    needs: deploy-supabase # Wait for Supabase deployment first
    
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📋 Deploy Info
        run: |
          echo "🚀 Starting VPS deployment..."
          echo "📅 Date: $(date)"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📝 Commit: ${{ github.sha }}"
      
      - name: 🔑 Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
      
      - name: 🚀 Deploy via SSH
        run: |
          # Connect to the VPS and run commands remotely
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            
            # Navigate to project directory
            cd "/var/www/Ai-Trading-Bots"
            
            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin master
            git reset --hard origin/master
            
            # Install dependencies
            echo "📦 Installing dependencies..."
            npm install
            
            # Build the application
            echo "🔨 Building application..."
            npm run build
            
            # Restart PM2 process
            echo "🔄 Restarting application..."
            pm2 restart pablobots || pm2 start --name pablobots npm -- run preview
            
            # Save PM2 process
            echo "💾 Saving PM2 process..."
            pm2 save
            
            # Show recent logs
            echo "📋 Recent logs:"
            pm2 logs pablobots --lines 10 --nostream
          EOF
      
      - name: 📊 Deployment Summary
        run: |
          echo "✅ VPS deployment completed!"
          echo "🌐 Your trading bot should be live at: https://${{ secrets.VPS_HOST }}"
          echo "📱 Check PM2 status: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'pm2 status'"
